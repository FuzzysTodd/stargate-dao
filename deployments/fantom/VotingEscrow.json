{
  "address": "0x933421675cDC8c280e5F21f0e061E77849293dba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "min_time",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum VotingEscrow.DepositType",
          "name": "deposit_type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "add_to_whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAtT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "changeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contracts_whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "create_lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit_for",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "get_last_user_slope",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increase_amount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "increase_amount_and_time",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "increase_unlock_time",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int128",
          "name": "amount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "locked__end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "point_history",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "remove_from_whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slope_changes",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAtT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfersEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_point_epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "user_point_history",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "user_point_history__ts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "withdraw_and_create_lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc257f1fcf5d780c4fe1b3452e2614ebef0c182c2e23770a3d28567c72eb7d785",
  "receipt": {
    "to": null,
    "from": "0x1D7C6783328C145393e84fb47a7f7C548f5Ee28d",
    "contractAddress": "0x933421675cDC8c280e5F21f0e061E77849293dba",
    "transactionIndex": 6,
    "gasUsed": "3264554",
    "logsBloom": "0x
    "blockHash": "0x000198fd00000335ed2d8fdea16e7f0ee8e4e9e61d4dccd76ee955a215311e81",
    "transactionHash": "0xc257f1fcf5d780c4fe1b3452e2614ebef0c182c2e23770a3d28567c72eb7d785",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 36572827,
        "transactionHash": "0xc257f1fcf5d780c4fe1b3452e2614ebef0c182c2e23770a3d28567c72eb7d785",
        "address": "0x933421675cDC8c280e5F21f0e061E77849293dba",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001d7c6783328c145393e84fb47a7f7c548f5ee28d"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0x000198fd00000335ed2d8fdea16e7f0ee8e4e9e61d4dccd76ee955a215311e81"
      }
    ],
    "blockNumber": 36572827,
    "cumulativeGasUsed": "4663923",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",
    2419200
  ],
  "numDeployments": 1,
  "solcInputHash": "820d81c0a9867d8302a65c3783f3d5fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min_time\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VotingEscrow.DepositType\",\"name\":\"deposit_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"add_to_whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOfAtT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts_whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"create_lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_last_user_slope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increase_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"increase_amount_and_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"increase_unlock_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"locked__end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"point_history\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"remove_from_whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slope_changes\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_point_history\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"user_point_history__ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"withdraw_and_create_lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add_to_whitelist(address)\":{\"params\":{\"addr\":\"Address to be whitelisted\"}},\"balanceOfAt(address,uint256)\":{\"details\":\"Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\",\"params\":{\"_block\":\"Block to calculate the voting power at\",\"addr\":\"User's wallet address\"},\"returns\":{\"_0\":\"Voting power\"}},\"constructor\":{\"params\":{\"token_addr\":\"`ERC20CRV` token address\"}},\"create_lock(uint256,uint256)\":{\"params\":{\"_unlock_time\":\"Epoch time when tokens unlock, rounded down to whole weeks\",\"_value\":\"Amount to deposit\"}},\"deposit_for(address,uint256)\":{\"details\":\"Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user\",\"params\":{\"_addr\":\"User's wallet address\",\"_value\":\"Amount to add to user's lock\"}},\"get_last_user_slope(address)\":{\"params\":{\"addr\":\"Address of the user wallet\"},\"returns\":{\"_0\":\"Value of the slope\"}},\"increase_amount(uint256)\":{\"params\":{\"_value\":\"Amount of tokens to deposit and add to the lock\"}},\"increase_amount_and_time(uint256,uint256)\":{\"params\":{\"_unlock_time\":\"New epoch time for unlocking\"}},\"increase_unlock_time(uint256)\":{\"params\":{\"_unlock_time\":\"New epoch time for unlocking\"}},\"locked__end(address)\":{\"params\":{\"_addr\":\"User wallet address\"},\"returns\":{\"_0\":\"Epoch time of the lock end\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remove_from_whitelist(address)\":{\"params\":{\"addr\":\"Address to be removed from whitelist\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupplyAt(uint256)\":{\"params\":{\"_block\":\"Block to calculate the total voting power at\"},\"returns\":{\"_0\":\"Total voting power at `_block`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"user_point_history__ts(address,uint256)\":{\"params\":{\"_addr\":\"User wallet address\",\"_idx\":\"User epoch number\"},\"returns\":{\"_0\":\"Epoch time of the checkpoint\"}},\"withdraw_and_create_lock(uint256,uint256)\":{\"params\":{\"_unlock_time\":\"Epoch time when tokens unlock, rounded down to whole weeks\",\"_value\":\"Amount to deposit\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add_to_whitelist(address)\":{\"notice\":\"Add address to whitelist smart contract depositors `addr`\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Measure voting power of `addr` at block height `_block`\"},\"checkpoint()\":{\"notice\":\"Record global data to checkpoint\"},\"constructor\":{\"notice\":\"Contract constructor\"},\"create_lock(uint256,uint256)\":{\"notice\":\"External function for _create_lock\"},\"deposit_for(address,uint256)\":{\"notice\":\"Deposit `_value` tokens for `_addr` and add to the lock\"},\"get_last_user_slope(address)\":{\"notice\":\"Get the most recently recorded rate of voting power decrease for `_addr`\"},\"increase_amount(uint256)\":{\"notice\":\"Deposit `_value` additional tokens for `msg.sender` without modifying the unlock time\"},\"increase_amount_and_time(uint256,uint256)\":{\"notice\":\"Extend the unlock time and/or for `msg.sender` to `_unlock_time`\"},\"increase_unlock_time(uint256)\":{\"notice\":\"Extend the unlock time for `msg.sender` to `_unlock_time`\"},\"locked__end(address)\":{\"notice\":\"Get timestamp when `_addr`'s lock finishes\"},\"remove_from_whitelist(address)\":{\"notice\":\"Remove a smart contract address from whitelist\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Calculate total voting power at some point in the past\"},\"unlock()\":{\"notice\":\"Unlock all locked balances\"},\"user_point_history__ts(address,uint256)\":{\"notice\":\"Get the timestamp for checkpoint `_idx` for `_addr`\"},\"withdraw_and_create_lock(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingEscrow.sol\":\"VotingEscrow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n@title Voting Escrow\\n@author Curve Finance\\n@license MIT\\n@notice Votes have a weight depending on time, so that users are\\n        committed to the future of (whatever they are voting for)\\n@dev Vote weight decays linearly over time. Lock time cannot be\\n     more than `MAXTIME` (3 years).\\n\\n# Voting escrow to have time-weighted votes\\n# Votes have a weight depending on time, so that users are committed\\n# to the future of (whatever they are voting for).\\n# The weight in this implementation is linear, and lock cannot be more than maxtime:\\n# w ^\\n# 1 +        /\\n#   |      /\\n#   |    /\\n#   |  /\\n#   |/\\n# 0 +--------+------> time\\n#       maxtime (3 years?)\\n*/\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nstruct Point {\\n    int128 bias;\\n    int128 slope; // # -dweight / dt\\n    uint ts;\\n    uint blk; // block\\n}\\n/* We cannot really do block numbers per se b/c slope is per time, not per block\\n * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n * What we can do is to extrapolate ***At functions */\\n\\nstruct LockedBalance {\\n    int128 amount;\\n    uint end;\\n}\\n\\ncontract VotingEscrow is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME\\n    }\\n\\n    event Deposit(address indexed provider, uint value, uint indexed locktime, DepositType deposit_type, uint ts);\\n    event Withdraw(address indexed provider, uint value, uint ts);\\n    event Supply(uint prevSupply, uint supply);\\n\\n    uint internal constant WEEK = 1 weeks;\\n    uint public constant MAXTIME = 3 * 365 * 86400;\\n    int128 internal constant iMAXTIME = 3 * 365 * 86400;\\n    uint internal constant MULTIPLIER = 1 ether;\\n\\n    uint public immutable MINTIME;\\n    address public immutable token;\\n    uint public supply;\\n    bool public unlocked;\\n\\n    mapping(address => LockedBalance) public locked;\\n\\n    uint public epoch;\\n    mapping(uint => Point) public point_history; // epoch -> unsigned point\\n    mapping(address => Point[1000000000]) public user_point_history; // user -> Point[user_epoch]\\n    mapping(address => uint) public user_point_epoch;\\n    mapping(uint => int128) public slope_changes; // time -> signed slope change\\n\\n    // Aragon's view methods for compatibility\\n    address public controller;\\n    bool public transfersEnabled;\\n\\n    string public constant name = \\\"veSTG\\\";\\n    string public constant symbol = \\\"veSTG\\\";\\n    string public constant version = \\\"1.0.0\\\";\\n    uint8 public constant decimals = 18;\\n\\n    // Whitelisted (smart contract) wallets which are allowed to deposit\\n    // The goal is to prevent tokenizing the escrow\\n    mapping(address => bool) public contracts_whitelist;\\n\\n    /// @notice Contract constructor\\n    /// @param token_addr `ERC20CRV` token address\\n    constructor(address token_addr, uint min_time) {\\n        token = token_addr;\\n        point_history[0].blk = block.number;\\n        point_history[0].ts = block.timestamp;\\n        controller = msg.sender;\\n        transfersEnabled = true;\\n        MINTIME = min_time;\\n    }\\n\\n    modifier onlyUserOrWhitelist() {\\n        if (msg.sender != tx.origin) {\\n            require(contracts_whitelist[msg.sender], \\\"Smart contract not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier notUnlocked() {\\n        require(!unlocked, \\\"unlocked globally\\\");\\n        _;\\n    }\\n\\n    /// @notice Add address to whitelist smart contract depositors `addr`\\n    /// @param addr Address to be whitelisted\\n    function add_to_whitelist(address addr) external onlyOwner {\\n        contracts_whitelist[addr] = true;\\n    }\\n\\n    /// @notice Remove a smart contract address from whitelist\\n    /// @param addr Address to be removed from whitelist\\n    function remove_from_whitelist(address addr) external onlyOwner {\\n        contracts_whitelist[addr] = false;\\n    }\\n\\n    /// @notice Unlock all locked balances\\n    function unlock() external onlyOwner {\\n        unlocked = true;\\n    }\\n\\n    /// @notice Get the most recently recorded rate of voting power decrease for `_addr`\\n    /// @param addr Address of the user wallet\\n    /// @return Value of the slope\\n    function get_last_user_slope(address addr) external view returns (int128) {\\n        uint uepoch = user_point_epoch[addr];\\n        return user_point_history[addr][uepoch].slope;\\n    }\\n\\n    /// @notice Get the timestamp for checkpoint `_idx` for `_addr`\\n    /// @param _addr User wallet address\\n    /// @param _idx User epoch number\\n    /// @return Epoch time of the checkpoint\\n    function user_point_history__ts(address _addr, uint _idx) external view returns (uint) {\\n        return user_point_history[_addr][_idx].ts;\\n    }\\n\\n    /// @notice Get timestamp when `_addr`'s lock finishes\\n    /// @param _addr User wallet address\\n    /// @return Epoch time of the lock end\\n    function locked__end(address _addr) external view returns (uint) {\\n        return locked[_addr].end;\\n    }\\n\\n    /// @notice Record global and per-user data to checkpoint\\n    /// @param _addr User's wallet address. No user checkpoint if 0x0\\n    /// @param old_locked Pevious locked amount / end lock time for the user\\n    /// @param new_locked New locked amount / end lock time for the user\\n    function _checkpoint(address _addr, LockedBalance memory old_locked, LockedBalance memory new_locked) internal {\\n        Point memory u_old;\\n        Point memory u_new;\\n        int128 old_dslope = 0;\\n        int128 new_dslope = 0;\\n        uint _epoch = epoch;\\n\\n        if (_addr != address(0x0)) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (old_locked.end > block.timestamp && old_locked.amount > 0) {\\n                u_old.slope = old_locked.amount / iMAXTIME;\\n                u_old.bias = u_old.slope * int128(int(old_locked.end - block.timestamp));\\n            }\\n            if (new_locked.end > block.timestamp && new_locked.amount > 0) {\\n                u_new.slope = new_locked.amount / iMAXTIME;\\n                u_new.bias = u_new.slope * int128(int(new_locked.end - block.timestamp));\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // old_locked.end can be in the past and in the future\\n            // new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            old_dslope = slope_changes[old_locked.end];\\n            if (new_locked.end != 0) {\\n                if (new_locked.end == old_locked.end) {\\n                    new_dslope = old_dslope;\\n                } else {\\n                    new_dslope = slope_changes[new_locked.end];\\n                }\\n            }\\n        }\\n\\n        Point memory last_point = Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\\n        if (_epoch > 0) {\\n            last_point = point_history[_epoch];\\n        }\\n        uint last_checkpoint = last_point.ts;\\n        // initial_last_point is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n\\n        uint initial_last_point_ts = last_point.ts;\\n        uint initial_last_point_blk = last_point.blk;\\n\\n        uint block_slope = 0; // dblock/dt\\n        if (block.timestamp > last_point.ts) {\\n            block_slope = (MULTIPLIER * (block.number - last_point.blk)) / (block.timestamp - last_point.ts);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint t_i = (last_checkpoint / WEEK) * WEEK;\\n        for (uint i = 0; i < 255; ++i) {\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            t_i += WEEK;\\n            int128 d_slope = 0;\\n            if (t_i > block.timestamp) {\\n                t_i = block.timestamp;\\n            } else {\\n                d_slope = slope_changes[t_i];\\n            }\\n            last_point.bias -= last_point.slope * int128(int(t_i - last_checkpoint));\\n            last_point.slope += d_slope;\\n            if (last_point.bias < 0) {\\n                // This can happen\\n                last_point.bias = 0;\\n            }\\n            if (last_point.slope < 0) {\\n                // This cannot happen - just in case\\n                last_point.slope = 0;\\n            }\\n            last_checkpoint = t_i;\\n            last_point.ts = t_i;\\n            last_point.blk = initial_last_point_blk + (block_slope * (t_i - initial_last_point_ts)) / MULTIPLIER;\\n\\n            _epoch += 1;\\n            if (t_i == block.timestamp) {\\n                last_point.blk = block.number;\\n                break;\\n            } else {\\n                point_history[_epoch] = last_point;\\n            }\\n        }\\n\\n        epoch = _epoch;\\n        // Now point_history is filled until t=now\\n\\n        if (_addr != address(0x0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            last_point.slope += (u_new.slope - u_old.slope);\\n            last_point.bias += (u_new.bias - u_old.bias);\\n            if (last_point.slope < 0) {\\n                last_point.slope = 0;\\n            }\\n            if (last_point.bias < 0) {\\n                last_point.bias = 0;\\n            }\\n        }\\n\\n        // Record the changed point into history\\n        point_history[_epoch] = last_point;\\n\\n        if (_addr != address(0x0)) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [new_locked.end]\\n            // and add old_user_slope to [old_locked.end]\\n            if (old_locked.end > block.timestamp) {\\n                // old_dslope was <something> - u_old.slope, so we cancel that\\n                old_dslope += u_old.slope;\\n                if (new_locked.end == old_locked.end) {\\n                    old_dslope -= u_new.slope; // It was a new deposit, not extension\\n                }\\n                slope_changes[old_locked.end] = old_dslope;\\n            }\\n\\n            if (new_locked.end > block.timestamp) {\\n                if (new_locked.end > old_locked.end) {\\n                    new_dslope -= u_new.slope; // old slope disappeared at this point\\n                    slope_changes[new_locked.end] = new_dslope;\\n                }\\n                // else: we recorded it already in old_dslope\\n            }\\n            // Now handle user history\\n            address addr = _addr;\\n            uint user_epoch = user_point_epoch[addr] + 1;\\n\\n            user_point_epoch[addr] = user_epoch;\\n            u_new.ts = block.timestamp;\\n            u_new.blk = block.number;\\n            user_point_history[addr][user_epoch] = u_new;\\n        }\\n    }\\n\\n    /// @notice Deposit and lock tokens for a user\\n    /// @param _addr User's wallet address\\n    /// @param _value Amount to deposit\\n    /// @param unlock_time New time when to unlock the tokens, or 0 if unchanged\\n    /// @param locked_balance Previous locked amount / timestamp\\n    /// @param deposit_type The type of deposit\\n    function _deposit_for(address _addr, uint _value, uint unlock_time, LockedBalance memory locked_balance, DepositType deposit_type) internal {\\n        LockedBalance memory _locked = locked_balance;\\n        uint supply_before = supply;\\n\\n        supply = supply_before + _value;\\n        LockedBalance memory old_locked;\\n        (old_locked.amount, old_locked.end) = (_locked.amount, _locked.end);\\n        // Adding to existing lock, or if a lock is expired - creating a new one\\n        _locked.amount += int128(int(_value));\\n        if (unlock_time != 0) {\\n            _locked.end = unlock_time;\\n        }\\n        locked[_addr] = _locked;\\n\\n        // Possibilities:\\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n        _checkpoint(_addr, old_locked, _locked);\\n\\n        if (_value != 0) {\\n            IERC20(token).safeTransferFrom(_addr, address(this), _value);\\n        }\\n\\n        emit Deposit(_addr, _value, _locked.end, deposit_type, block.timestamp);\\n        emit Supply(supply_before, supply_before + _value);\\n    }\\n\\n    /// @notice Record global data to checkpoint\\n    function checkpoint() external notUnlocked {\\n        _checkpoint(address(0x0), LockedBalance(0, 0), LockedBalance(0, 0));\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `_addr` and add to the lock\\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n    ///      cannot extend their locktime and deposit for a brand new user\\n    /// @param _addr User's wallet address\\n    /// @param _value Amount to add to user's lock\\n    function deposit_for(address _addr, uint _value) external nonReentrant notUnlocked {\\n        LockedBalance memory _locked = locked[_addr];\\n\\n        require(_value > 0); // dev: need non-zero value\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"Cannot add to expired lock. Withdraw\\\");\\n        _deposit_for(_addr, _value, 0, _locked, DepositType.DEPOSIT_FOR_TYPE);\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\\n    /// @param _value Amount to deposit\\n    /// @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n    function _create_lock(uint _value, uint _unlock_time) internal {\\n        require(_value > 0); // dev: need non-zero value\\n\\n        LockedBalance memory _locked = locked[msg.sender];\\n        require(_locked.amount == 0, \\\"Withdraw old tokens first\\\");\\n\\n        uint unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n        require(unlock_time >= block.timestamp + MINTIME, \\\"Voting lock must be at least MINTIME\\\");\\n        require(unlock_time <= block.timestamp + MAXTIME, \\\"Voting lock can be 3 years max\\\");\\n\\n        _deposit_for(msg.sender, _value, unlock_time, _locked, DepositType.CREATE_LOCK_TYPE);\\n    }\\n\\n    /// @notice External function for _create_lock\\n    /// @param _value Amount to deposit\\n    /// @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n    function create_lock(uint _value, uint _unlock_time) external nonReentrant onlyUserOrWhitelist notUnlocked {\\n        _create_lock(_value, _unlock_time);\\n    }\\n\\n\\n    /// @notice Deposit `_value` additional tokens for `msg.sender` without modifying the unlock time\\n    /// @param _value Amount of tokens to deposit and add to the lock\\n    function increase_amount(uint _value) external nonReentrant onlyUserOrWhitelist notUnlocked {\\n        _increase_amount(_value);\\n    }\\n\\n    function _increase_amount(uint _value) internal {\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        require(_value > 0); // dev: need non-zero value\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"Cannot add to expired lock. Withdraw\\\");\\n\\n        _deposit_for(msg.sender, _value, 0, _locked, DepositType.INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    /// @notice Extend the unlock time for `msg.sender` to `_unlock_time`\\n    /// @param _unlock_time New epoch time for unlocking\\n    function increase_unlock_time(uint _unlock_time) external nonReentrant onlyUserOrWhitelist notUnlocked {\\n        _increase_unlock_time(_unlock_time);\\n    }\\n\\n    function _increase_unlock_time(uint _unlock_time) internal {\\n        LockedBalance memory _locked = locked[msg.sender];\\n        uint unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n\\n        require(_locked.end > block.timestamp, \\\"Lock expired\\\");\\n        require(_locked.amount > 0, \\\"Nothing is locked\\\");\\n        require(unlock_time > _locked.end, \\\"Can only increase lock duration\\\");\\n        require(unlock_time <= block.timestamp + MAXTIME, \\\"Voting lock can be 3 years max\\\");\\n\\n        _deposit_for(msg.sender, 0, unlock_time, _locked, DepositType.INCREASE_UNLOCK_TIME);\\n    }\\n\\n    /// @notice Extend the unlock time and/or for `msg.sender` to `_unlock_time`\\n    /// @param _unlock_time New epoch time for unlocking\\n    function increase_amount_and_time(uint _value, uint _unlock_time) external nonReentrant onlyUserOrWhitelist notUnlocked {\\n        require(_value > 0 || _unlock_time > 0, \\\"Value and Unlock cannot both be 0\\\");\\n        if (_value > 0 && _unlock_time > 0) {\\n            _increase_amount(_value);\\n            _increase_unlock_time(_unlock_time);\\n        } else if (_value > 0 && _unlock_time == 0) {\\n            _increase_amount(_value);\\n        } else {\\n            _increase_unlock_time(_unlock_time);\\n        }\\n    }\\n\\n    /// @notice Withdraw all tokens for `msg.sender`\\n    /// @dev Only possible if the lock has expired\\n    function _withdraw() internal {\\n        LockedBalance memory _locked = locked[msg.sender];\\n        uint value = uint(int(_locked.amount));\\n\\n        if (!unlocked) {\\n            require(block.timestamp >= _locked.end, \\\"The lock didn't expire\\\");\\n        }\\n\\n        locked[msg.sender] = LockedBalance(0, 0);\\n        uint supply_before = supply;\\n        supply = supply_before - value;\\n\\n        // old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, _locked, LockedBalance(0, 0));\\n\\n        IERC20(token).safeTransfer(msg.sender, value);\\n\\n        emit Withdraw(msg.sender, value, block.timestamp);\\n        emit Supply(supply_before, supply_before - value);\\n    }\\n\\n    function withdraw() external nonReentrant {\\n        _withdraw();\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\\n    /// @param _value Amount to deposit\\n    /// @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n    function withdraw_and_create_lock(uint _value, uint _unlock_time) external nonReentrant onlyUserOrWhitelist notUnlocked {\\n        _withdraw();\\n        _create_lock(_value, _unlock_time);\\n    }\\n\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    // They measure the weights for the purpose of voting, so they don't represent\\n    // real coins.\\n\\n    /// @notice Binary search to estimate timestamp for block number\\n    /// @param _block Block to find\\n    /// @param max_epoch Don't go beyond this epoch\\n    /// @return Approximate timestamp for block\\n    function _find_block_epoch(uint _block, uint max_epoch) internal view returns (uint) {\\n        // Binary search\\n        uint _min = 0;\\n        uint _max = max_epoch;\\n        for (uint i = 0; i < 128; ++i) {\\n            // Will be always enough for 128-bit numbers\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint _mid = (_min + _max + 1) / 2;\\n            if (point_history[_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /// @notice Get the current voting power for `msg.sender`\\n    /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n    /// @param addr User wallet address\\n    /// @param _t Epoch time to return voting power at\\n    /// @return User voting power\\n    function _balanceOf(address addr, uint _t) internal view returns (uint) {\\n        uint _epoch = user_point_epoch[addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory last_point = user_point_history[addr][_epoch];\\n            last_point.bias -= last_point.slope * int128(int(_t) - int(last_point.ts));\\n            if (last_point.bias < 0) {\\n                last_point.bias = 0;\\n            }\\n            return uint(int(last_point.bias));\\n        }\\n    }\\n\\n    function balanceOfAtT(address addr, uint _t) external view returns (uint) {\\n        return _balanceOf(addr, _t);\\n    }\\n\\n    function balanceOf(address addr) external view returns (uint) {\\n        return _balanceOf(addr, block.timestamp);\\n    }\\n\\n    /// @notice Measure voting power of `addr` at block height `_block`\\n    /// @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n    /// @param addr User's wallet address\\n    /// @param _block Block to calculate the voting power at\\n    /// @return Voting power\\n    function balanceOfAt(address addr, uint _block) external view returns (uint) {\\n        // Copying and pasting totalSupply code because Vyper cannot pass by\\n        // reference yet\\n        require(_block <= block.number);\\n\\n        // Binary search\\n        uint _min = 0;\\n        uint _max = user_point_epoch[addr];\\n        for (uint i = 0; i < 128; ++i) {\\n            // Will be always enough for 128-bit numbers\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint _mid = (_min + _max + 1) / 2;\\n            if (user_point_history[addr][_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n\\n        Point memory upoint = user_point_history[addr][_min];\\n\\n        uint max_epoch = epoch;\\n        uint _epoch = _find_block_epoch(_block, max_epoch);\\n        Point memory point_0 = point_history[_epoch];\\n        uint d_block = 0;\\n        uint d_t = 0;\\n        if (_epoch < max_epoch) {\\n            Point memory point_1 = point_history[_epoch + 1];\\n            d_block = point_1.blk - point_0.blk;\\n            d_t = point_1.ts - point_0.ts;\\n        } else {\\n            d_block = block.number - point_0.blk;\\n            d_t = block.timestamp - point_0.ts;\\n        }\\n        uint block_time = point_0.ts;\\n        if (d_block != 0) {\\n            block_time += (d_t * (_block - point_0.blk)) / d_block;\\n        }\\n\\n        upoint.bias -= upoint.slope * int128(int(block_time - upoint.ts));\\n        if (upoint.bias >= 0) {\\n            return uint(uint128(upoint.bias));\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param point The point (bias/slope) to start search from\\n    /// @param t Time to calculate the total voting power at\\n    /// @return Total voting power at that time\\n    function _supply_at(Point memory point, uint t) internal view returns (uint) {\\n        Point memory last_point = point;\\n        uint t_i = (last_point.ts / WEEK) * WEEK;\\n        for (uint i = 0; i < 255; ++i) {\\n            t_i += WEEK;\\n            int128 d_slope = 0;\\n            if (t_i > t) {\\n                t_i = t;\\n            } else {\\n                d_slope = slope_changes[t_i];\\n            }\\n            last_point.bias -= last_point.slope * int128(int(t_i - last_point.ts));\\n            if (t_i == t) {\\n                break;\\n            }\\n            last_point.slope += d_slope;\\n            last_point.ts = t_i;\\n        }\\n\\n        if (last_point.bias < 0) {\\n            last_point.bias = 0;\\n        }\\n        return uint(uint128(last_point.bias));\\n    }\\n\\n    /// @notice Calculate total voting power\\n    /// @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n    /// @return Total voting power\\n    function _totalSupply(uint t) internal view returns (uint) {\\n        uint _epoch = epoch;\\n        Point memory last_point = point_history[_epoch];\\n        return _supply_at(last_point, t);\\n    }\\n\\n    function totalSupplyAtT(uint t) external view returns (uint) {\\n        return _totalSupply(t);\\n    }\\n\\n    function totalSupply() external view returns (uint) {\\n        return _totalSupply(block.timestamp);\\n    }\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param _block Block to calculate the total voting power at\\n    /// @return Total voting power at `_block`\\n    function totalSupplyAt(uint _block) external view returns (uint) {\\n        require(_block <= block.number);\\n        uint _epoch = epoch;\\n        uint target_epoch = _find_block_epoch(_block, _epoch);\\n\\n        Point memory point = point_history[target_epoch];\\n        uint dt = 0;\\n        if (target_epoch < _epoch) {\\n            Point memory point_next = point_history[target_epoch + 1];\\n            if (point.blk != point_next.blk) {\\n                dt = ((_block - point.blk) * (point_next.ts - point.ts)) / (point_next.blk - point.blk);\\n            }\\n        } else {\\n            if (point.blk != block.number) {\\n                dt = ((_block - point.blk) * (block.timestamp - point.ts)) / (block.number - point.blk);\\n            }\\n        }\\n        // Now dt contains info on how far are we beyond point\\n        return _supply_at(point, point.ts + dt);\\n    }\\n\\n    // Dummy methods for compatibility with Aragon\\n    function changeController(address _newController) external {\\n        require(msg.sender == controller);\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x7499394b40e0232d869ddca9ecf9645e167675a0ce8e8677858a048d44b80c43\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620039f6380380620039f683398101604081905262000034916200011f565b6200003f33620000cf565b6001805560609190911b6001600160601b03191660a052600080526006602052437f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4fa55427f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f955600a8054600160a01b6001600160a81b03199091163360ff60a01b19161717905560805262000159565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121562000132578182fd5b82516001600160a01b038116811462000149578283fd5b6020939093015192949293505050565b60805160a05160601c61385f620001976000396000818161076c01528181611d6e01526120d90152600081816104a20152611ecb015261385f6000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c8063715018a611610186578063bef97c87116100e3578063da020a1811610097578063f2fde38b11610071578063f2fde38b14610734578063f77c479114610747578063fc0c546a1461076757600080fd5b8063da020a1814610703578063ee00ef3a14610716578063eff7a6121461072157600080fd5b8063cbf9fe5f116100c8578063cbf9fe5f1461065d578063d07b705f146106a5578063d1febfb9146106b857600080fd5b8063bef97c8714610630578063c2c4c5c11461065557600080fd5b806395d89b411161013a578063a69df4b51161011f578063a69df4b5146105dc578063ac25f266146105e4578063adc63589146105f757600080fd5b806395d89b411461031f578063981b24d0146105c957600080fd5b80638da5cb5b1161016b5780638da5cb5b1461056e578063900cf0cf146105ad57806390fad1e6146105b657600080fd5b8063715018a6146105535780637c74a1741461055b57600080fd5b80633cebb8231161023f57806365fc3873116101f35780637116c60c116101cd5780637116c60c146104f7578063711974841461050a5780637142a6a61461054057600080fd5b806365fc3873146104c45780636a5e2650146104d757806370a08231146104e457600080fd5b80634ee2cd7e116102245780634ee2cd7e1461044e57806354fd4d50146104615780635b51c3081461049d57600080fd5b80633cebb823146104285780634957677c1461043b57600080fd5b806328d09d47116102965780633617a2041161027b5780633617a204146103da5780633a46273e1461040d5780633ccfd60b1461042057600080fd5b806328d09d4714610385578063313ce567146103c057600080fd5b806306fdde03116102c757806306fdde031461031f57806318160ddd146103685780632371eb231461037057600080fd5b8063010ae757146102e3578063047fc9aa14610316575b600080fd5b6103036102f1366004613315565b60086020526000908152604090205481565b6040519081526020015b60405180910390f35b61030360025481565b61035b6040518060400160405280600581526020017f766553544700000000000000000000000000000000000000000000000000000081525081565b60405161030d91906133cd565b61030361078e565b61038361037e366004613390565b61079e565b005b61039861039336600461332f565b6108ce565b60408051600f95860b81529390940b602084015292820152606081019190915260800161030d565b6103c8601281565b60405160ff909116815260200161030d565b6103fd6103e8366004613315565b600b6020526000908152604090205460ff1681565b604051901515815260200161030d565b61038361041b36600461332f565b610922565b610383610b04565b610383610436366004613315565b610b6a565b610383610449366004613378565b610bd5565b61030361045c36600461332f565b610cf6565b61035b6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6103037f000000000000000000000000000000000000000000000000000000000000000081565b6103836104d2366004613390565b6110af565b6003546103fd9060ff1681565b6103036104f2366004613315565b6111c0565b610303610505366004613378565b6111cc565b61052d610518366004613378565b600960205260009081526040902054600f0b81565b604051600f9190910b815260200161030d565b61038361054e366004613390565b6111d7565b6103836113ba565b61052d610569366004613315565b61142d565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161030d565b61030360055481565b6103836105c4366004613315565b6114bb565b6103036105d7366004613378565b61156e565b610383611737565b6103836105f2366004613315565b6117cb565b610303610605366004613315565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090206001015490565b600a546103fd9074010000000000000000000000000000000000000000900460ff1681565b610383611881565b61068b61066b366004613315565b60046020526000908152604090208054600190910154600f9190910b9082565b60408051600f9390930b835260208301919091520161030d565b6103036106b336600461332f565b611912565b6103986106c6366004613378565b600660205260009081526040902080546001820154600290920154600f82810b93700100000000000000000000000000000000909304900b919084565b61030361071136600461332f565b611925565b6103036305a39a8081565b61038361072f366004613378565b611995565b610383610742366004613315565b611aaf565b600a546105889073ffffffffffffffffffffffffffffffffffffffff1681565b6105887f000000000000000000000000000000000000000000000000000000000000000081565b600061079942611bab565b905090565b600260015414156107f65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015533321461086157336000908152600b602052604090205460ff166108615760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff16156108b45760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b6108bc611c20565b6108c68282611e18565b505060018055565b600760205281600052604060002081633b9aca0081106108ed57600080fd5b6003020180546001820154600290920154600f82810b955070010000000000000000000000000000000090920490910b925084565b600260015414156109755760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b600260015560035460ff16156109cd5760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260409182902082518084019093528054600f90810b810b900b8352600101549082015281610a1d57600080fd5b60008160000151600f0b13610a745760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e640000000000000000000060448201526064016107ed565b42816020015111610aec5760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e205769746860448201527f647261770000000000000000000000000000000000000000000000000000000060648201526084016107ed565b610afb83836000846000611fd5565b50506001805550565b60026001541415610b575760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b6002600155610b64611c20565b60018055565b600a5473ffffffffffffffffffffffffffffffffffffffff163314610b8e57600080fd5b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60026001541415610c285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b6002600155333214610c9357336000908152600b602052604090205460ff16610c935760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff1615610ce65760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b610cef816121a6565b5060018055565b600043821115610d0557600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260086020526040812054815b6080811015610dfe57818310610d4257610dfe565b60006002610d5084866134dc565b610d5b9060016134dc565b610d659190613568565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600760205260409020909150869082633b9aca008110610dca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600302016002015411610ddf57809350610ded565b610dea60018261374f565b92505b50610df781613792565b9050610d2d565b5073ffffffffffffffffffffffffffffffffffffffff8516600090815260076020526040812083633b9aca008110610e5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60408051608081018252600392909202929092018054600f81810b810b810b8452700100000000000000000000000000000000909104810b810b900b602083015260018101549282019290925260029091015460608201526005549091506000610ec987836122c2565b600081815260066020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b938101939093526001810154918301919091526002015460608201529192508084841015610fd2576000600681610f428760016134dc565b8152602080820192909252604090810160002081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060808301829052860151919250610fb4919061374f565b925083604001518160400151610fca919061374f565b915050610ff6565b6060830151610fe1904361374f565b9150826040015142610ff3919061374f565b90505b60408301518215611033578284606001518c611012919061374f565b61101c908461362e565b6110269190613568565b61103090826134dc565b90505b6040870151611042908261374f565b8760200151611051919061357c565b8751889061106090839061366b565b600f90810b810b90915288516000910b12905061109b57505093516fffffffffffffffffffffffffffffffff1696506110a995505050505050565b600099505050505050505050505b92915050565b600260015414156111025760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b600260015533321461116d57336000908152600b602052604090205460ff1661116d5760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff16156108bc5760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b60006110a9824261234c565b60006110a982611bab565b6002600154141561122a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b600260015533321461129557336000908152600b602052604090205460ff166112955760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff16156112e85760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b60008211806112f75750600081115b6113695760405162461bcd60e51b815260206004820152602160248201527f56616c756520616e6420556e6c6f636b2063616e6e6f7420626f74682062652060448201527f300000000000000000000000000000000000000000000000000000000000000060648201526084016107ed565b6000821180156113795750600081115b1561139557611387826121a6565b6113908161248a565b6108c6565b6000821180156113a3575080155b156113b157611390826121a6565b6108c68161248a565b60005473ffffffffffffffffffffffffffffffffffffffff1633146114215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b61142b6000612645565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600860209081526040808320546007909252822081633b9aca008110611498577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60030201547001000000000000000000000000000000009004600f0b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60004382111561157d57600080fd5b600554600061158c84836122c2565b600081815260066020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060820152919250838310156116c55760006006816116048660016134dc565b8152602080820192909252604090810160002081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060808301829052850151919250146116bf5782606001518160600151611685919061374f565b83604001518260400151611699919061374f565b60608501516116a8908a61374f565b6116b2919061362e565b6116bc9190613568565b91505b50611714565b438260600151146117145760608201516116df904361374f565b60408301516116ee904261374f565b60608401516116fd908961374f565b611707919061362e565b6117119190613568565b90505b61172d8282846040015161172891906134dc565b6126ba565b9695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461179e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146118325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60035460ff16156118d45760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b61142b600060405180604001604052806000600f0b8152602001600081525060405180604001604052806000600f0b815260200160008152506127cd565b600061191e838361234c565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812082633b9aca008110611985577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6003020160010154905092915050565b600260015414156119e85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b6002600155333214611a5357336000908152600b602052604090205460ff16611a535760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff1615611aa65760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b610cef8161248a565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b165760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b73ffffffffffffffffffffffffffffffffffffffff8116611b9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107ed565b611ba881612645565b50565b600554600081815260066020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060820152909190611c1881856126ba565b949350505050565b3360009081526004602090815260409182902082518084019093528054600f90810b810b810b80855260019092015492840192909252600354910b9060ff16611cb7578160200151421015611cb75760405162461bcd60e51b815260206004820152601660248201527f546865206c6f636b206469646e2774206578706972650000000000000000000060448201526064016107ed565b60408051808201825260008082526020808301828152338352600490915292902090518154600f9190910b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161781559051600190910155600254611d30828261374f565b6002556040805180820190915260008082526020820152611d5490339085906127cd565b611d9573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163384612f9a565b6040805183815242602082015233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a27f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c81611dfb848261374f565b6040805192835260208301919091520160405180910390a1505050565b60008211611e2557600080fd5b3360009081526004602090815260409182902082518084019093528054600f90810b810b810b80855260019092015492840192909252900b15611eaa5760405162461bcd60e51b815260206004820152601960248201527f5769746864726177206f6c6420746f6b656e732066697273740000000000000060448201526064016107ed565b600062093a80611eba8185613568565b611ec4919061362e565b9050611ef07f0000000000000000000000000000000000000000000000000000000000000000426134dc565b811015611f645760405162461bcd60e51b8152602060048201526024808201527f566f74696e67206c6f636b206d757374206265206174206c65617374204d494e60448201527f54494d450000000000000000000000000000000000000000000000000000000060648201526084016107ed565b611f726305a39a80426134dc565b811115611fc15760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652033207965617273206d6178000060448201526064016107ed565b611fcf338583856001611fd5565b50505050565b6002548290611fe486826134dc565b6002556040805180820190915260008082526020820152825160208085015190830152600f90810b900b815282518790849061202190839061346d565b600f90810b900b905250851561203957602083018690525b73ffffffffffffffffffffffffffffffffffffffff8816600090815260046020908152604090912084518154600f9190910b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909116178155908401516001909101556120b98882856127cd565b86156121015761210173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001689308a61306e565b82602001518873ffffffffffffffffffffffffffffffffffffffff167fbe9cf0e939c614fad640a623a53ba0a807c8cb503c4c4c8dacabe27b86ff2dd58987426040516121509392919061341e565b60405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c8261218489826134dc565b6040805192835260208301919091520160405180910390a15050505050505050565b3360009081526004602090815260409182902082518084019093528054600f90810b810b900b83526001015490820152816121e057600080fd5b60008160000151600f0b136122375760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e640000000000000000000060448201526064016107ed565b428160200151116122af5760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e205769746860448201527f647261770000000000000000000000000000000000000000000000000000000060648201526084016107ed565b6122be33836000846002611fd5565b5050565b60008082815b6080811015612342578183106122dd57612342565b600060026122eb84866134dc565b6122f69060016134dc565b6123009190613568565b600081815260066020526040902060020154909150871061232357809350612331565b61232e60018261374f565b92505b5061233b81613792565b90506122c8565b5090949350505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040812054806123815760009150506110a9565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260076020526040812082633b9aca0081106123e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60408051608081018252600392909202929092018054600f81810b810b810b8452700100000000000000000000000000000000909104810b810b900b60208301526001810154928201839052600201546060820152915061244290856136db565b8160200151612451919061357c565b8151829061246090839061366b565b600f90810b810b90915282516000910b1215905061247d57600081525b51600f0b91506110a99050565b33600090815260046020908152604080832081518083019092528054600f90810b810b900b825260010154918101919091529062093a806124cb8185613568565b6124d5919061362e565b90504282602001511161252a5760405162461bcd60e51b815260206004820152600c60248201527f4c6f636b2065787069726564000000000000000000000000000000000000000060448201526064016107ed565b60008260000151600f0b136125815760405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e67206973206c6f636b656400000000000000000000000000000060448201526064016107ed565b816020015181116125d45760405162461bcd60e51b815260206004820152601f60248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e0060448201526064016107ed565b6125e26305a39a80426134dc565b8111156126315760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652033207965617273206d6178000060448201526064016107ed565b61264033600083856003611fd5565b505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080839050600062093a808083604001516126d69190613568565b6126e0919061362e565b905060005b60ff81101561279c576126fb62093a80836134dc565b915060008583111561270f57859250612723565b50600082815260096020526040902054600f0b5b6040840151612732908461374f565b8460200151612741919061357c565b8451859061275090839061366b565b600f90810b900b90525082861415612768575061279c565b808460200181815161277a919061346d565b600f90810b900b905250506040830182905261279581613792565b90506126e5565b5060008260000151600f0b12156127b257600082525b50516fffffffffffffffffffffffffffffffff169392505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152600554600090819073ffffffffffffffffffffffffffffffffffffffff88161561295f57428760200151118015612853575060008760000151600f0b135b156128a0578651612869906305a39a80906134f4565b600f90810b900b60208087019190915287015161288790429061374f565b8560200151612896919061357c565b600f90810b900b85525b4286602001511180156128ba575060008660000151600f0b135b156129075785516128d0906305a39a80906134f4565b600f90810b900b6020808601919091528601516128ee90429061374f565b84602001516128fd919061357c565b600f90810b900b84525b602080880151600090815260098252604090205490870151600f9190910b93501561295f578660200151866020015114156129445782915061295f565b602080870151600090815260099091526040902054600f0b91505b6040805160808101825260008082526020820152429181019190915243606082015281156129e9575060008181526006602090815260409182902082516080810184528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b9281019290925260018101549282019290925260029091015460608201525b604081015160608201518190600042831015612a3c576040850151612a0e904261374f565b6060860151612a1d904361374f565b612a2f90670de0b6b3a764000061362e565b612a399190613568565b90505b600062093a80612a4c8187613568565b612a56919061362e565b905060005b60ff811015612beb57612a7162093a80836134dc565b9150600042831115612a8557429250612a99565b50600082815260096020526040902054600f0b5b612aa3878461374f565b8860200151612ab2919061357c565b88518990612ac190839061366b565b600f90810b900b905250602088018051829190612adf90839061346d565b600f90810b810b90915289516000910b12159050612afc57600088525b60008860200151600f0b1215612b1457600060208901525b604088018390529195508591670de0b6b3a7640000612b33878561374f565b612b3d908661362e565b612b479190613568565b612b5190866134dc565b6060890152612b6160018a6134dc565b985042831415612b775750436060880152612beb565b6000898152600660209081526040918290208a51918b0151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029390910b16919091178155908901516001820155606089015160029091015550612be481613792565b9050612a5b565b50600587905573ffffffffffffffffffffffffffffffffffffffff8e1615612c91578a602001518a60200151612c21919061366b565b86602001818151612c32919061346d565b600f90810b900b9052508a518a51612c4a919061366b565b86518790612c5990839061346d565b600f90810b810b90915260208801516000910b12159050612c7c57600060208701525b60008660000151600f0b1215612c9157600086525b600087815260066020908152604091829020885191890151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029390910b16919091178155908701516001820155606087015160029091015573ffffffffffffffffffffffffffffffffffffffff8e1615612f8a57428d602001511115612da25760208b0151612d2b908a61346d565b98508c602001518c602001511415612d4f5760208a0151612d4c908a61366b565b98505b60208d810151600090815260099091526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff600f8c900b161790555b428c602001511115612e22578c602001518c602001511115612e225760208a0151612dcd908961366b565b60208d810151600090815260099091526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff600f84900b1617905597505b73ffffffffffffffffffffffffffffffffffffffff8e166000908152600860205260408120548f9190612e569060016134dc565b905080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550428c6040018181525050438c60600181815250508b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082633b9aca008110612f2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b82516020840151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029290910b1617600391909102919091019081556040820151600182015560609091015160029091015550505b5050505050505050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526126409084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526130cc565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611fcf9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612fec565b600061312e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166131be9092919063ffffffff16565b805190915015612640578080602001905181019061314c9190613358565b6126405760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107ed565b6060611c1884846000858573ffffffffffffffffffffffffffffffffffffffff85163b61322d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ed565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161325691906133b1565b60006040518083038185875af1925050503d8060008114613293576040519150601f19603f3d011682016040523d82523d6000602084013e613298565b606091505b50915091506132a88282866132b3565b979650505050505050565b606083156132c257508161191e565b8251156132d25782518084602001fd5b8160405162461bcd60e51b81526004016107ed91906133cd565b803573ffffffffffffffffffffffffffffffffffffffff8116811461331057600080fd5b919050565b600060208284031215613326578081fd5b61191e826132ec565b60008060408385031215613341578081fd5b61334a836132ec565b946020939093013593505050565b600060208284031215613369578081fd5b8151801515811461191e578182fd5b600060208284031215613389578081fd5b5035919050565b600080604083850312156133a2578182fd5b50508035926020909101359150565b600082516133c3818460208701613766565b9190910192915050565b60208152600082518060208401526133ec816040850160208701613766565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b838152606081016004841061345c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b602082019390935260400152919050565b600081600f0b83600f0b828212826f7fffffffffffffffffffffffffffffff0382138115161561349f5761349f6137cb565b827fffffffffffffffffffffffffffffffff800000000000000000000000000000000382128116156134d3576134d36137cb565b50019392505050565b600082198211156134ef576134ef6137cb565b500190565b600081600f0b83600f0b8061350b5761350b6137fa565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffff800000000000000000000000000000008314161561355f5761355f6137cb565b90059392505050565b600082613577576135776137fa565b500490565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff838213848413838304851182821616156135b3576135b36137cb565b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000868512868205861281841616156135ed576135ed6137cb565b878712925085820587128484161615613608576136086137cb565b8585058712818416161561361e5761361e6137cb565b5050509290910295945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613666576136666137cb565b500290565b600081600f0b83600f0b828112817fffffffffffffffffffffffffffffffff80000000000000000000000000000000018312811516156136ad576136ad6137cb565b816f7fffffffffffffffffffffffffffffff0183138116156136d1576136d16137cb565b5090039392505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615613715576137156137cb565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613749576137496137cb565b50500390565b600082821015613761576137616137cb565b500390565b60005b83811015613781578181015183820152602001613769565b83811115611fcf5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137c4576137c46137cb565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212200a86b1fb12d3ffd99504fa8c25a828386baa6d11738230b356092ced0ef2a67164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c8063715018a611610186578063bef97c87116100e3578063da020a1811610097578063f2fde38b11610071578063f2fde38b14610734578063f77c479114610747578063fc0c546a1461076757600080fd5b8063da020a1814610703578063ee00ef3a14610716578063eff7a6121461072157600080fd5b8063cbf9fe5f116100c8578063cbf9fe5f1461065d578063d07b705f146106a5578063d1febfb9146106b857600080fd5b8063bef97c8714610630578063c2c4c5c11461065557600080fd5b806395d89b411161013a578063a69df4b51161011f578063a69df4b5146105dc578063ac25f266146105e4578063adc63589146105f757600080fd5b806395d89b411461031f578063981b24d0146105c957600080fd5b80638da5cb5b1161016b5780638da5cb5b1461056e578063900cf0cf146105ad57806390fad1e6146105b657600080fd5b8063715018a6146105535780637c74a1741461055b57600080fd5b80633cebb8231161023f57806365fc3873116101f35780637116c60c116101cd5780637116c60c146104f7578063711974841461050a5780637142a6a61461054057600080fd5b806365fc3873146104c45780636a5e2650146104d757806370a08231146104e457600080fd5b80634ee2cd7e116102245780634ee2cd7e1461044e57806354fd4d50146104615780635b51c3081461049d57600080fd5b80633cebb823146104285780634957677c1461043b57600080fd5b806328d09d47116102965780633617a2041161027b5780633617a204146103da5780633a46273e1461040d5780633ccfd60b1461042057600080fd5b806328d09d4714610385578063313ce567146103c057600080fd5b806306fdde03116102c757806306fdde031461031f57806318160ddd146103685780632371eb231461037057600080fd5b8063010ae757146102e3578063047fc9aa14610316575b600080fd5b6103036102f1366004613315565b60086020526000908152604090205481565b6040519081526020015b60405180910390f35b61030360025481565b61035b6040518060400160405280600581526020017f766553544700000000000000000000000000000000000000000000000000000081525081565b60405161030d91906133cd565b61030361078e565b61038361037e366004613390565b61079e565b005b61039861039336600461332f565b6108ce565b60408051600f95860b81529390940b602084015292820152606081019190915260800161030d565b6103c8601281565b60405160ff909116815260200161030d565b6103fd6103e8366004613315565b600b6020526000908152604090205460ff1681565b604051901515815260200161030d565b61038361041b36600461332f565b610922565b610383610b04565b610383610436366004613315565b610b6a565b610383610449366004613378565b610bd5565b61030361045c36600461332f565b610cf6565b61035b6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6103037f000000000000000000000000000000000000000000000000000000000000000081565b6103836104d2366004613390565b6110af565b6003546103fd9060ff1681565b6103036104f2366004613315565b6111c0565b610303610505366004613378565b6111cc565b61052d610518366004613378565b600960205260009081526040902054600f0b81565b604051600f9190910b815260200161030d565b61038361054e366004613390565b6111d7565b6103836113ba565b61052d610569366004613315565b61142d565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161030d565b61030360055481565b6103836105c4366004613315565b6114bb565b6103036105d7366004613378565b61156e565b610383611737565b6103836105f2366004613315565b6117cb565b610303610605366004613315565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090206001015490565b600a546103fd9074010000000000000000000000000000000000000000900460ff1681565b610383611881565b61068b61066b366004613315565b60046020526000908152604090208054600190910154600f9190910b9082565b60408051600f9390930b835260208301919091520161030d565b6103036106b336600461332f565b611912565b6103986106c6366004613378565b600660205260009081526040902080546001820154600290920154600f82810b93700100000000000000000000000000000000909304900b919084565b61030361071136600461332f565b611925565b6103036305a39a8081565b61038361072f366004613378565b611995565b610383610742366004613315565b611aaf565b600a546105889073ffffffffffffffffffffffffffffffffffffffff1681565b6105887f000000000000000000000000000000000000000000000000000000000000000081565b600061079942611bab565b905090565b600260015414156107f65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015533321461086157336000908152600b602052604090205460ff166108615760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff16156108b45760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b6108bc611c20565b6108c68282611e18565b505060018055565b600760205281600052604060002081633b9aca0081106108ed57600080fd5b6003020180546001820154600290920154600f82810b955070010000000000000000000000000000000090920490910b925084565b600260015414156109755760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b600260015560035460ff16156109cd5760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260409182902082518084019093528054600f90810b810b900b8352600101549082015281610a1d57600080fd5b60008160000151600f0b13610a745760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e640000000000000000000060448201526064016107ed565b42816020015111610aec5760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e205769746860448201527f647261770000000000000000000000000000000000000000000000000000000060648201526084016107ed565b610afb83836000846000611fd5565b50506001805550565b60026001541415610b575760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b6002600155610b64611c20565b60018055565b600a5473ffffffffffffffffffffffffffffffffffffffff163314610b8e57600080fd5b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60026001541415610c285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b6002600155333214610c9357336000908152600b602052604090205460ff16610c935760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff1615610ce65760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b610cef816121a6565b5060018055565b600043821115610d0557600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260086020526040812054815b6080811015610dfe57818310610d4257610dfe565b60006002610d5084866134dc565b610d5b9060016134dc565b610d659190613568565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600760205260409020909150869082633b9aca008110610dca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600302016002015411610ddf57809350610ded565b610dea60018261374f565b92505b50610df781613792565b9050610d2d565b5073ffffffffffffffffffffffffffffffffffffffff8516600090815260076020526040812083633b9aca008110610e5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60408051608081018252600392909202929092018054600f81810b810b810b8452700100000000000000000000000000000000909104810b810b900b602083015260018101549282019290925260029091015460608201526005549091506000610ec987836122c2565b600081815260066020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b938101939093526001810154918301919091526002015460608201529192508084841015610fd2576000600681610f428760016134dc565b8152602080820192909252604090810160002081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060808301829052860151919250610fb4919061374f565b925083604001518160400151610fca919061374f565b915050610ff6565b6060830151610fe1904361374f565b9150826040015142610ff3919061374f565b90505b60408301518215611033578284606001518c611012919061374f565b61101c908461362e565b6110269190613568565b61103090826134dc565b90505b6040870151611042908261374f565b8760200151611051919061357c565b8751889061106090839061366b565b600f90810b810b90915288516000910b12905061109b57505093516fffffffffffffffffffffffffffffffff1696506110a995505050505050565b600099505050505050505050505b92915050565b600260015414156111025760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b600260015533321461116d57336000908152600b602052604090205460ff1661116d5760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff16156108bc5760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b60006110a9824261234c565b60006110a982611bab565b6002600154141561122a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b600260015533321461129557336000908152600b602052604090205460ff166112955760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff16156112e85760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b60008211806112f75750600081115b6113695760405162461bcd60e51b815260206004820152602160248201527f56616c756520616e6420556e6c6f636b2063616e6e6f7420626f74682062652060448201527f300000000000000000000000000000000000000000000000000000000000000060648201526084016107ed565b6000821180156113795750600081115b1561139557611387826121a6565b6113908161248a565b6108c6565b6000821180156113a3575080155b156113b157611390826121a6565b6108c68161248a565b60005473ffffffffffffffffffffffffffffffffffffffff1633146114215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b61142b6000612645565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600860209081526040808320546007909252822081633b9aca008110611498577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60030201547001000000000000000000000000000000009004600f0b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60004382111561157d57600080fd5b600554600061158c84836122c2565b600081815260066020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060820152919250838310156116c55760006006816116048660016134dc565b8152602080820192909252604090810160002081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060808301829052850151919250146116bf5782606001518160600151611685919061374f565b83604001518260400151611699919061374f565b60608501516116a8908a61374f565b6116b2919061362e565b6116bc9190613568565b91505b50611714565b438260600151146117145760608201516116df904361374f565b60408301516116ee904261374f565b60608401516116fd908961374f565b611707919061362e565b6117119190613568565b90505b61172d8282846040015161172891906134dc565b6126ba565b9695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461179e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146118325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60035460ff16156118d45760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b61142b600060405180604001604052806000600f0b8152602001600081525060405180604001604052806000600f0b815260200160008152506127cd565b600061191e838361234c565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812082633b9aca008110611985577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6003020160010154905092915050565b600260015414156119e85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ed565b6002600155333214611a5357336000908152600b602052604090205460ff16611a535760405162461bcd60e51b815260206004820152601a60248201527f536d61727420636f6e7472616374206e6f7420616c6c6f77656400000000000060448201526064016107ed565b60035460ff1615611aa65760405162461bcd60e51b815260206004820152601160248201527f756e6c6f636b656420676c6f62616c6c7900000000000000000000000000000060448201526064016107ed565b610cef8161248a565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b165760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ed565b73ffffffffffffffffffffffffffffffffffffffff8116611b9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107ed565b611ba881612645565b50565b600554600081815260066020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060820152909190611c1881856126ba565b949350505050565b3360009081526004602090815260409182902082518084019093528054600f90810b810b810b80855260019092015492840192909252600354910b9060ff16611cb7578160200151421015611cb75760405162461bcd60e51b815260206004820152601660248201527f546865206c6f636b206469646e2774206578706972650000000000000000000060448201526064016107ed565b60408051808201825260008082526020808301828152338352600490915292902090518154600f9190910b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161781559051600190910155600254611d30828261374f565b6002556040805180820190915260008082526020820152611d5490339085906127cd565b611d9573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163384612f9a565b6040805183815242602082015233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a27f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c81611dfb848261374f565b6040805192835260208301919091520160405180910390a1505050565b60008211611e2557600080fd5b3360009081526004602090815260409182902082518084019093528054600f90810b810b810b80855260019092015492840192909252900b15611eaa5760405162461bcd60e51b815260206004820152601960248201527f5769746864726177206f6c6420746f6b656e732066697273740000000000000060448201526064016107ed565b600062093a80611eba8185613568565b611ec4919061362e565b9050611ef07f0000000000000000000000000000000000000000000000000000000000000000426134dc565b811015611f645760405162461bcd60e51b8152602060048201526024808201527f566f74696e67206c6f636b206d757374206265206174206c65617374204d494e60448201527f54494d450000000000000000000000000000000000000000000000000000000060648201526084016107ed565b611f726305a39a80426134dc565b811115611fc15760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652033207965617273206d6178000060448201526064016107ed565b611fcf338583856001611fd5565b50505050565b6002548290611fe486826134dc565b6002556040805180820190915260008082526020820152825160208085015190830152600f90810b900b815282518790849061202190839061346d565b600f90810b900b905250851561203957602083018690525b73ffffffffffffffffffffffffffffffffffffffff8816600090815260046020908152604090912084518154600f9190910b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909116178155908401516001909101556120b98882856127cd565b86156121015761210173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001689308a61306e565b82602001518873ffffffffffffffffffffffffffffffffffffffff167fbe9cf0e939c614fad640a623a53ba0a807c8cb503c4c4c8dacabe27b86ff2dd58987426040516121509392919061341e565b60405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c8261218489826134dc565b6040805192835260208301919091520160405180910390a15050505050505050565b3360009081526004602090815260409182902082518084019093528054600f90810b810b900b83526001015490820152816121e057600080fd5b60008160000151600f0b136122375760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e640000000000000000000060448201526064016107ed565b428160200151116122af5760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e205769746860448201527f647261770000000000000000000000000000000000000000000000000000000060648201526084016107ed565b6122be33836000846002611fd5565b5050565b60008082815b6080811015612342578183106122dd57612342565b600060026122eb84866134dc565b6122f69060016134dc565b6123009190613568565b600081815260066020526040902060020154909150871061232357809350612331565b61232e60018261374f565b92505b5061233b81613792565b90506122c8565b5090949350505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040812054806123815760009150506110a9565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260076020526040812082633b9aca0081106123e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60408051608081018252600392909202929092018054600f81810b810b810b8452700100000000000000000000000000000000909104810b810b900b60208301526001810154928201839052600201546060820152915061244290856136db565b8160200151612451919061357c565b8151829061246090839061366b565b600f90810b810b90915282516000910b1215905061247d57600081525b51600f0b91506110a99050565b33600090815260046020908152604080832081518083019092528054600f90810b810b900b825260010154918101919091529062093a806124cb8185613568565b6124d5919061362e565b90504282602001511161252a5760405162461bcd60e51b815260206004820152600c60248201527f4c6f636b2065787069726564000000000000000000000000000000000000000060448201526064016107ed565b60008260000151600f0b136125815760405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e67206973206c6f636b656400000000000000000000000000000060448201526064016107ed565b816020015181116125d45760405162461bcd60e51b815260206004820152601f60248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e0060448201526064016107ed565b6125e26305a39a80426134dc565b8111156126315760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652033207965617273206d6178000060448201526064016107ed565b61264033600083856003611fd5565b505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080839050600062093a808083604001516126d69190613568565b6126e0919061362e565b905060005b60ff81101561279c576126fb62093a80836134dc565b915060008583111561270f57859250612723565b50600082815260096020526040902054600f0b5b6040840151612732908461374f565b8460200151612741919061357c565b8451859061275090839061366b565b600f90810b900b90525082861415612768575061279c565b808460200181815161277a919061346d565b600f90810b900b905250506040830182905261279581613792565b90506126e5565b5060008260000151600f0b12156127b257600082525b50516fffffffffffffffffffffffffffffffff169392505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152600554600090819073ffffffffffffffffffffffffffffffffffffffff88161561295f57428760200151118015612853575060008760000151600f0b135b156128a0578651612869906305a39a80906134f4565b600f90810b900b60208087019190915287015161288790429061374f565b8560200151612896919061357c565b600f90810b900b85525b4286602001511180156128ba575060008660000151600f0b135b156129075785516128d0906305a39a80906134f4565b600f90810b900b6020808601919091528601516128ee90429061374f565b84602001516128fd919061357c565b600f90810b900b84525b602080880151600090815260098252604090205490870151600f9190910b93501561295f578660200151866020015114156129445782915061295f565b602080870151600090815260099091526040902054600f0b91505b6040805160808101825260008082526020820152429181019190915243606082015281156129e9575060008181526006602090815260409182902082516080810184528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b9281019290925260018101549282019290925260029091015460608201525b604081015160608201518190600042831015612a3c576040850151612a0e904261374f565b6060860151612a1d904361374f565b612a2f90670de0b6b3a764000061362e565b612a399190613568565b90505b600062093a80612a4c8187613568565b612a56919061362e565b905060005b60ff811015612beb57612a7162093a80836134dc565b9150600042831115612a8557429250612a99565b50600082815260096020526040902054600f0b5b612aa3878461374f565b8860200151612ab2919061357c565b88518990612ac190839061366b565b600f90810b900b905250602088018051829190612adf90839061346d565b600f90810b810b90915289516000910b12159050612afc57600088525b60008860200151600f0b1215612b1457600060208901525b604088018390529195508591670de0b6b3a7640000612b33878561374f565b612b3d908661362e565b612b479190613568565b612b5190866134dc565b6060890152612b6160018a6134dc565b985042831415612b775750436060880152612beb565b6000898152600660209081526040918290208a51918b0151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029390910b16919091178155908901516001820155606089015160029091015550612be481613792565b9050612a5b565b50600587905573ffffffffffffffffffffffffffffffffffffffff8e1615612c91578a602001518a60200151612c21919061366b565b86602001818151612c32919061346d565b600f90810b900b9052508a518a51612c4a919061366b565b86518790612c5990839061346d565b600f90810b810b90915260208801516000910b12159050612c7c57600060208701525b60008660000151600f0b1215612c9157600086525b600087815260066020908152604091829020885191890151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029390910b16919091178155908701516001820155606087015160029091015573ffffffffffffffffffffffffffffffffffffffff8e1615612f8a57428d602001511115612da25760208b0151612d2b908a61346d565b98508c602001518c602001511415612d4f5760208a0151612d4c908a61366b565b98505b60208d810151600090815260099091526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff600f8c900b161790555b428c602001511115612e22578c602001518c602001511115612e225760208a0151612dcd908961366b565b60208d810151600090815260099091526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff600f84900b1617905597505b73ffffffffffffffffffffffffffffffffffffffff8e166000908152600860205260408120548f9190612e569060016134dc565b905080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550428c6040018181525050438c60600181815250508b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082633b9aca008110612f2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b82516020840151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029290910b1617600391909102919091019081556040820151600182015560609091015160029091015550505b5050505050505050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526126409084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526130cc565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611fcf9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612fec565b600061312e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166131be9092919063ffffffff16565b805190915015612640578080602001905181019061314c9190613358565b6126405760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107ed565b6060611c1884846000858573ffffffffffffffffffffffffffffffffffffffff85163b61322d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ed565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161325691906133b1565b60006040518083038185875af1925050503d8060008114613293576040519150601f19603f3d011682016040523d82523d6000602084013e613298565b606091505b50915091506132a88282866132b3565b979650505050505050565b606083156132c257508161191e565b8251156132d25782518084602001fd5b8160405162461bcd60e51b81526004016107ed91906133cd565b803573ffffffffffffffffffffffffffffffffffffffff8116811461331057600080fd5b919050565b600060208284031215613326578081fd5b61191e826132ec565b60008060408385031215613341578081fd5b61334a836132ec565b946020939093013593505050565b600060208284031215613369578081fd5b8151801515811461191e578182fd5b600060208284031215613389578081fd5b5035919050565b600080604083850312156133a2578182fd5b50508035926020909101359150565b600082516133c3818460208701613766565b9190910192915050565b60208152600082518060208401526133ec816040850160208701613766565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b838152606081016004841061345c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b602082019390935260400152919050565b600081600f0b83600f0b828212826f7fffffffffffffffffffffffffffffff0382138115161561349f5761349f6137cb565b827fffffffffffffffffffffffffffffffff800000000000000000000000000000000382128116156134d3576134d36137cb565b50019392505050565b600082198211156134ef576134ef6137cb565b500190565b600081600f0b83600f0b8061350b5761350b6137fa565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffff800000000000000000000000000000008314161561355f5761355f6137cb565b90059392505050565b600082613577576135776137fa565b500490565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff838213848413838304851182821616156135b3576135b36137cb565b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000868512868205861281841616156135ed576135ed6137cb565b878712925085820587128484161615613608576136086137cb565b8585058712818416161561361e5761361e6137cb565b5050509290910295945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613666576136666137cb565b500290565b600081600f0b83600f0b828112817fffffffffffffffffffffffffffffffff80000000000000000000000000000000018312811516156136ad576136ad6137cb565b816f7fffffffffffffffffffffffffffffff0183138116156136d1576136d16137cb565b5090039392505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615613715576137156137cb565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613749576137496137cb565b50500390565b600082821015613761576137616137cb565b500390565b60005b83811015613781578181015183820152602001613769565b83811115611fcf5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137c4576137c46137cb565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212200a86b1fb12d3ffd99504fa8c25a828386baa6d11738230b356092ced0ef2a67164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add_to_whitelist(address)": {
        "params": {
          "addr": "Address to be whitelisted"
        }
      },
      "balanceOfAt(address,uint256)": {
        "details": "Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime",
        "params": {
          "_block": "Block to calculate the voting power at",
          "addr": "User's wallet address"
        },
        "returns": {
          "_0": "Voting power"
        }
      },
      "constructor": {
        "params": {
          "token_addr": "`ERC20CRV` token address"
        }
      },
      "create_lock(uint256,uint256)": {
        "params": {
          "_unlock_time": "Epoch time when tokens unlock, rounded down to whole weeks",
          "_value": "Amount to deposit"
        }
      },
      "deposit_for(address,uint256)": {
        "details": "Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user",
        "params": {
          "_addr": "User's wallet address",
          "_value": "Amount to add to user's lock"
        }
      },
      "get_last_user_slope(address)": {
        "params": {
          "addr": "Address of the user wallet"
        },
        "returns": {
          "_0": "Value of the slope"
        }
      },
      "increase_amount(uint256)": {
        "params": {
          "_value": "Amount of tokens to deposit and add to the lock"
        }
      },
      "increase_amount_and_time(uint256,uint256)": {
        "params": {
          "_unlock_time": "New epoch time for unlocking"
        }
      },
      "increase_unlock_time(uint256)": {
        "params": {
          "_unlock_time": "New epoch time for unlocking"
        }
      },
      "locked__end(address)": {
        "params": {
          "_addr": "User wallet address"
        },
        "returns": {
          "_0": "Epoch time of the lock end"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remove_from_whitelist(address)": {
        "params": {
          "addr": "Address to be removed from whitelist"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "_block": "Block to calculate the total voting power at"
        },
        "returns": {
          "_0": "Total voting power at `_block`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "user_point_history__ts(address,uint256)": {
        "params": {
          "_addr": "User wallet address",
          "_idx": "User epoch number"
        },
        "returns": {
          "_0": "Epoch time of the checkpoint"
        }
      },
      "withdraw_and_create_lock(uint256,uint256)": {
        "params": {
          "_unlock_time": "Epoch time when tokens unlock, rounded down to whole weeks",
          "_value": "Amount to deposit"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add_to_whitelist(address)": {
        "notice": "Add address to whitelist smart contract depositors `addr`"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Measure voting power of `addr` at block height `_block`"
      },
      "checkpoint()": {
        "notice": "Record global data to checkpoint"
      },
      "constructor": {
        "notice": "Contract constructor"
      },
      "create_lock(uint256,uint256)": {
        "notice": "External function for _create_lock"
      },
      "deposit_for(address,uint256)": {
        "notice": "Deposit `_value` tokens for `_addr` and add to the lock"
      },
      "get_last_user_slope(address)": {
        "notice": "Get the most recently recorded rate of voting power decrease for `_addr`"
      },
      "increase_amount(uint256)": {
        "notice": "Deposit `_value` additional tokens for `msg.sender` without modifying the unlock time"
      },
      "increase_amount_and_time(uint256,uint256)": {
        "notice": "Extend the unlock time and/or for `msg.sender` to `_unlock_time`"
      },
      "increase_unlock_time(uint256)": {
        "notice": "Extend the unlock time for `msg.sender` to `_unlock_time`"
      },
      "locked__end(address)": {
        "notice": "Get timestamp when `_addr`'s lock finishes"
      },
      "remove_from_whitelist(address)": {
        "notice": "Remove a smart contract address from whitelist"
      },
      "totalSupplyAt(uint256)": {
        "notice": "Calculate total voting power at some point in the past"
      },
      "unlock()": {
        "notice": "Unlock all locked balances"
      },
      "user_point_history__ts(address,uint256)": {
        "notice": "Get the timestamp for checkpoint `_idx` for `_addr`"
      },
      "withdraw_and_create_lock(uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 118,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1465,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "supply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1467,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "unlocked",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1472,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "locked",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(LockedBalance)1399_storage)"
      },
      {
        "astId": 1474,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "epoch",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1479,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "point_history",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Point)1394_storage)"
      },
      {
        "astId": 1486,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "user_point_history",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Point)1394_storage)1000000000_storage)"
      },
      {
        "astId": 1490,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "user_point_epoch",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1494,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "slope_changes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_int128)"
      },
      {
        "astId": 1496,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "controller",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1498,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "transfersEnabled",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1514,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "contracts_whitelist",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)1394_storage)1000000000_storage": {
        "base": "t_struct(Point)1394_storage",
        "encoding": "inplace",
        "label": "struct Point[1000000000]",
        "numberOfBytes": "96000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_array(t_struct(Point)1394_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Point[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)1394_storage)1000000000_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(LockedBalance)1399_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)1399_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int128)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_uint256,t_struct(Point)1394_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Point)",
        "numberOfBytes": "32",
        "value": "t_struct(Point)1394_storage"
      },
      "t_struct(LockedBalance)1399_storage": {
        "encoding": "inplace",
        "label": "struct LockedBalance",
        "members": [
          {
            "astId": 1396,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 1398,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)1394_storage": {
        "encoding": "inplace",
        "label": "struct Point",
        "members": [
          {
            "astId": 1387,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 1389,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 1391,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1393,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}