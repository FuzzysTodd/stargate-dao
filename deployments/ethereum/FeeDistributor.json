{
  "address": "0xAF667811A7eDcD5B0066CD4cA0da51637DB76D09",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "votingEscrow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "OnlyVeHolderClaimingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastCheckpointTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenCheckpointed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "TokenClaimingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userTokenTimeCursor",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "canTokenBeClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "checkpointToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "checkpointTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "checkpointUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "claimTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "enableOnlyVeHolderClaiming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "enableTokenClaiming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimeCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenCachedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenLastBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenTimeCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getTokensDistributedInWeek",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getTotalSupplyAtTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getUserBalanceAtTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserLastEpochCheckpointed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserTimeCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getUserTokenTimeCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotingEscrow",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "onlyVeHolderClaimingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0be53c70fa722c93c1b9cb8160f944062d81c24d6896c85192e03caba829ab53",
  "receipt": {
    "to": null,
    "from": "0xBFfe73b170DfaB7c940F3e831338982de3375872",
    "contractAddress": "0xAF667811A7eDcD5B0066CD4cA0da51637DB76D09",
    "transactionIndex": 11,
    "gasUsed": "2589277",
    "logsBloom": "0x
    "blockHash": "0x2b45af2427195115eb5856ed4c82af4ea274d1c7c4125951c21bceb9e79b5f7f",
    "transactionHash": "0x0be53c70fa722c93c1b9cb8160f944062d81c24d6896c85192e03caba829ab53",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 18094571,
        "transactionHash": "0x0be53c70fa722c93c1b9cb8160f944062d81c24d6896c85192e03caba829ab53",
        "address": "0xAF667811A7eDcD5B0066CD4cA0da51637DB76D09",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bffe73b170dfab7c940f3e831338982de3375872"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x2b45af2427195115eb5856ed4c82af4ea274d1c7c4125951c21bceb9e79b5f7f"
      }
    ],
    "blockNumber": 18094571,
    "cumulativeGasUsed": "4580005",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0e42acBD23FAee03249DAFF896b78d7e79fBD58E",
    1694044800
  ],
  "numDeployments": 1,
  "solcInputHash": "c304ad265ff3410194f738d9be1916ae",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"votingEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OnlyVeHolderClaimingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastCheckpointTimestamp\",\"type\":\"uint256\"}],\"name\":\"TokenCheckpointed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TokenClaimingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userTokenTimeCursor\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"canTokenBeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkpointToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"checkpointTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkpointUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableOnlyVeHolderClaiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableTokenClaiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenCachedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getTokensDistributedInWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getTotalSupplyAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getUserBalanceAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLastEpochCheckpointed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserTokenTimeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"onlyVeHolderClaimingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Balancer Labs. Original version https://github.com/balancer/balancer-v2-monorepo/blob/master/pkg/liquidity-mining/contracts/fee-distribution/FeeDistributor.sol\",\"details\":\"Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veSTG holders call `depositToken`.\",\"kind\":\"dev\",\"methods\":{\"canTokenBeClaimed(address)\":{\"params\":{\"token\":\"- The ERC20 token address to query.\"}},\"checkpointToken(address)\":{\"details\":\"Any `token` balance held by the FeeDistributor above that which is returned by `getTokenLastBalance` will be distributed evenly across the time period since `token` was last checkpointed. This function will be called automatically before claiming tokens to ensure the contract is properly updated.\",\"params\":{\"token\":\"- The ERC20 token address to be checkpointed.\"}},\"checkpointTokens(address[])\":{\"details\":\"A version of `checkpointToken` which supports checkpointing multiple tokens. See `checkpointToken` for more details.\",\"params\":{\"tokens\":\"- An array of ERC20 token addresses to be checkpointed.\"}},\"checkpointUser(address)\":{\"params\":{\"user\":\"- The address of the user to be checkpointed.\"}},\"claimToken(address,address)\":{\"details\":\"It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor is up to date before calculating the amount of tokens to be claimed.\",\"params\":{\"token\":\"- The ERC20 token address to be claimed.\",\"user\":\"- The user on behalf of which to claim.\"},\"returns\":{\"_0\":\"The amount of `token` sent to `user` as a result of claiming.\"}},\"claimTokens(address,address[])\":{\"details\":\"A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`. See `claimToken` for more details.\",\"params\":{\"tokens\":\"- An array of ERC20 token addresses to be claimed.\",\"user\":\"- The user on behalf of which to claim.\"},\"returns\":{\"_0\":\"An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\"}},\"depositToken(address,uint256)\":{\"details\":\"Sending tokens directly to the FeeDistributor instead of using `depositToken` may result in tokens being retroactively distributed to past weeks, or for the distribution to carry over to future weeks. If for some reason `depositToken` cannot be called, in order to ensure that all tokens are correctly distributed manually call `checkpointToken` before and after the token transfer.\",\"params\":{\"amount\":\"- The amount of tokens to deposit.\",\"token\":\"- The ERC20 token address to distribute.\"}},\"depositTokens(address[],uint256[])\":{\"details\":\"A version of `depositToken` which supports depositing multiple `tokens` at once. See `depositToken` for more details.\",\"params\":{\"amounts\":\"- An array of token amounts to deposit.\",\"tokens\":\"- An array of ERC20 token addresses to distribute.\"}},\"enableOnlyVeHolderClaiming(bool)\":{\"params\":{\"enabled\":\"- True if only the VotingEscrow holder can claim their rewards, false otherwise.\"}},\"enableTokenClaiming(address,bool)\":{\"params\":{\"enable\":\"- True if the token can be claimed, false otherwise.\",\"token\":\"- The token to enable or disable claiming.\"}},\"getTokenCachedBalance(address)\":{\"params\":{\"token\":\"- The ERC20 token address to query.\"}},\"getTokenStartTime(address)\":{\"params\":{\"token\":\"- The ERC20 token address to query.\"}},\"getTokenTimeCursor(address)\":{\"params\":{\"token\":\"- The ERC20 token address to query.\"}},\"getTokensDistributedInWeek(address,uint256)\":{\"params\":{\"timestamp\":\"- The timestamp corresponding to the beginning of the week of interest.\",\"token\":\"- The ERC20 token address to query.\"}},\"getTotalSupplyAtTimestamp(uint256)\":{\"details\":\"Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values. This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.\",\"params\":{\"timestamp\":\"- The timestamp at which to read the cached total supply at.\"}},\"getUserBalanceAtTimestamp(address,uint256)\":{\"details\":\"Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values. This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.\",\"params\":{\"timestamp\":\"- The timestamp at which to read the `user`'s cached balance at.\",\"user\":\"- The address of the user of which to read the cached balance of.\"}},\"getUserLastEpochCheckpointed(address)\":{\"params\":{\"user\":\"- The address of the user to query.\"}},\"getUserStartTime(address)\":{\"params\":{\"user\":\"- The address of the user to query.\"}},\"getUserTimeCursor(address)\":{\"params\":{\"user\":\"- The address of the user to query.\"}},\"getUserTokenTimeCursor(address,address)\":{\"params\":{\"token\":\"- The ERC20 token address to query.\",\"user\":\"- The address of the user to query.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawToken(address,uint256,address)\":{\"params\":{\"amount\":\"- The amount to withdraw.\",\"recipient\":\"- The address to transfer the tokens to.\",\"token\":\"- The token to withdraw.\"}}},\"title\":\"Fee Distributor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canTokenBeClaimed(address)\":{\"notice\":\"True if the given token can be claimed, false otherwise.\"},\"checkpoint()\":{\"notice\":\"Caches the total supply of veSTG at the beginning of each week. This function will be called automatically before claiming tokens to ensure the contract is properly updated.\"},\"checkpointToken(address)\":{\"notice\":\"Assigns any newly-received tokens held by the FeeDistributor to weekly distributions.\"},\"checkpointTokens(address[])\":{\"notice\":\"Assigns any newly-received tokens held by the FeeDistributor to weekly distributions.\"},\"checkpointUser(address)\":{\"notice\":\"Caches the user's balance of veSTG at the beginning of each week. This function will be called automatically before claiming tokens to ensure the contract is properly updated.\"},\"claimToken(address,address)\":{\"notice\":\"Claims all pending distributions of the provided token for a user.\"},\"claimTokens(address,address[])\":{\"notice\":\"Claims a number of tokens on behalf of a user.\"},\"depositToken(address,uint256)\":{\"notice\":\"Deposits tokens to be distributed in the current week.\"},\"depositTokens(address[],uint256[])\":{\"notice\":\"Deposits tokens to be distributed in the current week.\"},\"enableOnlyVeHolderClaiming(bool)\":{\"notice\":\"Enables / disables rewards claiming only by the VotingEscrow holder for the message sender.\"},\"enableTokenClaiming(address,bool)\":{\"notice\":\"Enables or disables claiming of the given token. Can be called only by Stargate DAO.\"},\"getStartTime()\":{\"notice\":\"Returns the time when fee distribution starts.\"},\"getTimeCursor()\":{\"notice\":\"Returns the global time cursor representing the most earliest uncheckpointed week.\"},\"getTokenCachedBalance(address)\":{\"notice\":\"Returns the token-level cached balance.\"},\"getTokenLastBalance(address)\":{\"notice\":\"Returns the FeeDistributor's cached balance of `token`.\"},\"getTokenStartTime(address)\":{\"notice\":\"Returns the token-level start time representing the timestamp users could start claiming this token\"},\"getTokenTimeCursor(address)\":{\"notice\":\"Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.\"},\"getTokensDistributedInWeek(address,uint256)\":{\"notice\":\"Returns the amount of `token` which the FeeDistributor received in the week beginning at `timestamp`.\"},\"getTotalSupplyAtTimestamp(uint256)\":{\"notice\":\"Returns the cached total supply of veSTG as of the provided timestamp.\"},\"getUserBalanceAtTimestamp(address,uint256)\":{\"notice\":\"Returns the user's cached balance of veSTG as of the provided timestamp.\"},\"getUserLastEpochCheckpointed(address)\":{\"notice\":\"Returns the user-level last checkpointed epoch.\"},\"getUserStartTime(address)\":{\"notice\":\"Returns the user-level start time representing the first week they're eligible to claim tokens.\"},\"getUserTimeCursor(address)\":{\"notice\":\"Returns the user-level time cursor representing the most earliest uncheckpointed week.\"},\"getUserTokenTimeCursor(address,address)\":{\"notice\":\"Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.\"},\"getVotingEscrow()\":{\"notice\":\"Returns the VotingEscrow (veSTG) token contract\"},\"onlyVeHolderClaimingEnabled(address)\":{\"notice\":\"Returns true if only the VotingEscrow holder can claim their rewards, false otherwise.\"},\"withdrawToken(address,uint256,address)\":{\"notice\":\"Withdraws the specified `amount` of the `token` from the contract to the `recipient`. Can be called only by Stargate DAO.\"}},\"notice\":\"Distributes any tokens transferred to the contract (e.g. Protocol fees) among veSTG holders proportionally based on a snapshot of the week at which the tokens are sent to the FeeDistributor contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeDistributor.sol\":\"FeeDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin-solc-0.7/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin-solc-0.7/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin-solc-0.7/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin-solc-0.7/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin-solc-0.7/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin-solc-0.7/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin-solc-0.7/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin-solc-0.7/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/FeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin-solc-0.7/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin-solc-0.7/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin-solc-0.7/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin-solc-0.7/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin-solc-0.7/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin-solc-0.7/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IFeeDistributor.sol\\\";\\nimport \\\"./interfaces/IVotingEscrow.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\n\\n/**\\n * @title Fee Distributor\\n * @author Balancer Labs. Original version https://github.com/balancer/balancer-v2-monorepo/blob/master/pkg/liquidity-mining/contracts/fee-distribution/FeeDistributor.sol\\n * @notice Distributes any tokens transferred to the contract (e.g. Protocol fees) among veSTG\\n * holders proportionally based on a snapshot of the week at which the tokens are sent to the FeeDistributor contract.\\n * @dev Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veSTG holders call `depositToken`.\\n */\\ncontract FeeDistributor is IFeeDistributor, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // gas optimization\\n    uint256 private constant WEEK_MINUS_SECOND = 1 weeks - 1;\\n\\n    IVotingEscrow private immutable _votingEscrow;\\n\\n    uint256 private immutable _startTime;\\n\\n    // Global State\\n    uint256 private _timeCursor;\\n    mapping(uint256 => uint256) private _veSupplyCache;\\n\\n    // Token State\\n\\n    // `startTime` and `timeCursor` are both timestamps so comfortably fit in a uint64.\\n    // `cachedBalance` will comfortably fit the total supply of any meaningful token.\\n    // Should more than 2^128 tokens be sent to this contract then checkpointing this token will fail until enough\\n    // tokens have been claimed to bring the total balance back below 2^128.\\n    struct TokenState {\\n        uint64 startTime;\\n        uint64 timeCursor;\\n        uint128 cachedBalance;\\n    }\\n    mapping(IERC20 => TokenState) private _tokenState;\\n    mapping(IERC20 => mapping(uint256 => uint256)) private _tokensPerWeek;\\n    mapping(IERC20 => bool) private _tokenClaimingEnabled;\\n\\n    // User State\\n\\n    // `startTime` and `timeCursor` are timestamps so will comfortably fit in a uint64.\\n    // For `lastEpochCheckpointed` to overflow would need over 2^128 transactions to the VotingEscrow contract.\\n    struct UserState {\\n        uint64 startTime;\\n        uint64 timeCursor;\\n        uint128 lastEpochCheckpointed;\\n    }\\n    mapping(address => UserState) internal _userState;\\n    mapping(address => mapping(uint256 => uint256)) private _userBalanceAtTimestamp;\\n    mapping(address => mapping(IERC20 => uint256)) private _userTokenTimeCursor;\\n    mapping(address => bool) private _onlyVeHolderClaimingEnabled;\\n\\n    /**\\n     * @dev Reverts if only the VotingEscrow holder can claim their rewards and the given address is a third-party caller.\\n     * @param user - The address to validate as the only allowed caller.\\n     */\\n    modifier userAllowedToClaim(address user) {\\n        if (_onlyVeHolderClaimingEnabled[user]) {\\n            require(msg.sender == user, \\\"Claiming is not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the given token cannot be claimed.\\n     * @param token - The token to check.\\n     */\\n    modifier tokenCanBeClaimed(IERC20 token) {\\n        _checkIfClaimingEnabled(token);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the given tokens cannot be claimed.\\n     * @param tokens - The tokens to check.\\n     */\\n    modifier tokensCanBeClaimed(IERC20[] calldata tokens) {\\n        uint256 tokensLength = tokens.length;\\n        for (uint256 i = 0; i < tokensLength; ++i) {\\n            _checkIfClaimingEnabled(tokens[i]);\\n        }\\n        _;\\n    }\\n\\n    constructor(IVotingEscrow votingEscrow, uint256 startTime) {\\n        _votingEscrow = votingEscrow;\\n\\n        startTime = _roundDownTimestamp(startTime);\\n        uint256 currentWeek = _roundDownTimestamp(block.timestamp);\\n        require(startTime >= currentWeek, \\\"Cannot start before current week\\\");\\n\\n        IVotingEscrow.Point memory pt = votingEscrow.point_history(0);\\n        require(startTime > pt.ts, \\\"Cannot start before VotingEscrow first epoch\\\");\\n\\n        _startTime = startTime;\\n        _timeCursor = startTime;\\n    }\\n\\n    /**\\n     * @notice Returns the VotingEscrow (veSTG) token contract\\n     */\\n    function getVotingEscrow() external view override returns (IVotingEscrow) {\\n        return _votingEscrow;\\n    }\\n\\n    /**\\n     * @notice Returns the time when fee distribution starts.\\n     */\\n    function getStartTime() external view override returns (uint256) {\\n        return _startTime;\\n    }\\n\\n    /**\\n     * @notice Returns the global time cursor representing the most earliest uncheckpointed week.\\n     */\\n    function getTimeCursor() external view override returns (uint256) {\\n        return _timeCursor;\\n    }\\n\\n    /**\\n     * @notice Returns the user-level start time representing the first week they're eligible to claim tokens.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserStartTime(address user) external view override returns (uint256) {\\n        return _userState[user].startTime;\\n    }\\n\\n    /**\\n     * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserTimeCursor(address user) external view override returns (uint256) {\\n        return _userState[user].timeCursor;\\n    }\\n\\n    /**\\n     * @notice Returns the user-level last checkpointed epoch.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserLastEpochCheckpointed(address user) external view override returns (uint256) {\\n        return _userState[user].lastEpochCheckpointed;\\n    }\\n\\n    /**\\n     * @notice True if the given token can be claimed, false otherwise.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function canTokenBeClaimed(IERC20 token) external view override returns (bool) {\\n        return _tokenClaimingEnabled[token];\\n    }\\n\\n    /**\\n     * @notice Returns the token-level start time representing the timestamp users could start claiming this token\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenStartTime(IERC20 token) external view override returns (uint256) {\\n        return _tokenState[token].startTime;\\n    }\\n\\n    /**\\n     * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenTimeCursor(IERC20 token) external view override returns (uint256) {\\n        return _tokenState[token].timeCursor;\\n    }\\n\\n    /**\\n     * @notice Returns the token-level cached balance.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenCachedBalance(IERC20 token) external view override returns (uint256) {\\n        return _tokenState[token].cachedBalance;\\n    }\\n\\n    /**\\n     * @notice Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.\\n     * @param user - The address of the user to query.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getUserTokenTimeCursor(address user, IERC20 token) external view override returns (uint256) {\\n        return _getUserTokenTimeCursor(user, token);\\n    }\\n\\n    /**\\n     * @notice Returns the user's cached balance of veSTG as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.\\n     * @param user - The address of the user of which to read the cached balance of.\\n     * @param timestamp - The timestamp at which to read the `user`'s cached balance at.\\n     */\\n    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external view override returns (uint256) {\\n        return _userBalanceAtTimestamp[user][timestamp];\\n    }\\n\\n    /**\\n     * @notice Returns the cached total supply of veSTG as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.\\n     * @param timestamp - The timestamp at which to read the cached total supply at.\\n     */\\n    function getTotalSupplyAtTimestamp(uint256 timestamp) external view override returns (uint256) {\\n        return _veSupplyCache[timestamp];\\n    }\\n\\n    /**\\n     * @notice Returns the FeeDistributor's cached balance of `token`.\\n     */\\n    function getTokenLastBalance(IERC20 token) external view override returns (uint256) {\\n        return _tokenState[token].cachedBalance;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of `token` which the FeeDistributor received in the week beginning at `timestamp`.\\n     * @param token - The ERC20 token address to query.\\n     * @param timestamp - The timestamp corresponding to the beginning of the week of interest.\\n     */\\n    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external view override returns (uint256) {\\n        return _tokensPerWeek[token][timestamp];\\n    }\\n\\n    // Preventing third-party claiming\\n\\n    /**\\n     * @notice Enables / disables rewards claiming only by the VotingEscrow holder for the message sender.\\n     * @param enabled - True if only the VotingEscrow holder can claim their rewards, false otherwise.\\n     */\\n    function enableOnlyVeHolderClaiming(bool enabled) external override {\\n        _onlyVeHolderClaimingEnabled[msg.sender] = enabled;\\n        emit OnlyVeHolderClaimingEnabled(msg.sender, enabled);\\n    }\\n\\n    /**\\n     * @notice Returns true if only the VotingEscrow holder can claim their rewards, false otherwise.\\n     */\\n    function onlyVeHolderClaimingEnabled(address user) external view override returns (bool) {\\n        return _onlyVeHolderClaimingEnabled[user];\\n    }\\n\\n    // Depositing\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev Sending tokens directly to the FeeDistributor instead of using `depositToken` may result in tokens being\\n     * retroactively distributed to past weeks, or for the distribution to carry over to future weeks.\\n     *\\n     * If for some reason `depositToken` cannot be called, in order to ensure that all tokens are correctly distributed\\n     * manually call `checkpointToken` before and after the token transfer.\\n     * @param token - The ERC20 token address to distribute.\\n     * @param amount - The amount of tokens to deposit.\\n     */\\n    function depositToken(IERC20 token, uint256 amount) external override nonReentrant tokenCanBeClaimed(token) {\\n        _checkpointToken(token, false);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        _checkpointToken(token, true);\\n    }\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev A version of `depositToken` which supports depositing multiple `tokens` at once.\\n     * See `depositToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to distribute.\\n     * @param amounts - An array of token amounts to deposit.\\n     */\\n    function depositTokens(IERC20[] calldata tokens, uint256[] calldata amounts) external override nonReentrant {\\n        require(tokens.length == amounts.length, \\\"Input length mismatch\\\");\\n\\n        uint256 length = tokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            _checkIfClaimingEnabled(tokens[i]);\\n            _checkpointToken(tokens[i], false);\\n            tokens[i].safeTransferFrom(msg.sender, address(this), amounts[i]);\\n            _checkpointToken(tokens[i], true);\\n        }\\n    }\\n\\n    // Checkpointing\\n\\n    /**\\n     * @notice Caches the total supply of veSTG at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     */\\n    function checkpoint() external override nonReentrant {\\n        _checkpointTotalSupply();\\n    }\\n\\n    /**\\n     * @notice Caches the user's balance of veSTG at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param user - The address of the user to be checkpointed.\\n     */\\n    function checkpointUser(address user) external override nonReentrant {\\n        _checkpointUserBalance(user);\\n    }\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the FeeDistributor to weekly distributions.\\n     * @dev Any `token` balance held by the FeeDistributor above that which is returned by `getTokenLastBalance`\\n     * will be distributed evenly across the time period since `token` was last checkpointed.\\n     *\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param token - The ERC20 token address to be checkpointed.\\n     */\\n    function checkpointToken(IERC20 token) external override nonReentrant tokenCanBeClaimed(token) {\\n        _checkpointToken(token, true);\\n    }\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the FeeDistributor to weekly distributions.\\n     * @dev A version of `checkpointToken` which supports checkpointing multiple tokens.\\n     * See `checkpointToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to be checkpointed.\\n     */\\n    function checkpointTokens(IERC20[] calldata tokens) external override nonReentrant {\\n        uint256 tokensLength = tokens.length;\\n        for (uint256 i = 0; i < tokensLength; ++i) {\\n            _checkIfClaimingEnabled(tokens[i]);\\n            _checkpointToken(tokens[i], true);\\n        }\\n    }\\n\\n    // Claiming\\n\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external override nonReentrant userAllowedToClaim(user) tokenCanBeClaimed(token) returns (uint256) {\\n        _checkpointTotalSupply();\\n        _checkpointUserBalance(user);\\n        _checkpointToken(token, false);\\n\\n        return _claimToken(user, token);\\n    }\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens) external override nonReentrant userAllowedToClaim(user) tokensCanBeClaimed(tokens) returns (uint256[] memory) {\\n        _checkpointTotalSupply();\\n        _checkpointUserBalance(user);\\n\\n        uint256 tokensLength = tokens.length;\\n        uint256[] memory amounts = new uint256[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; ++i) {\\n            _checkpointToken(tokens[i], false);\\n            amounts[i] = _claimToken(user, tokens[i]);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    // Governance\\n\\n    /**\\n     * @notice Withdraws the specified `amount` of the `token` from the contract to the `recipient`. Can be called only by Stargate DAO.\\n     * @param token - The token to withdraw.\\n     * @param amount - The amount to withdraw.\\n     * @param recipient - The address to transfer the tokens to.\\n     */\\n    function withdrawToken(IERC20 token, uint256 amount, address recipient) external override onlyOwner {\\n        token.safeTransfer(recipient, amount);\\n        emit TokenWithdrawn(token, amount, recipient);\\n    }\\n\\n    /**\\n     * @notice Enables or disables claiming of the given token. Can be called only by Stargate DAO.\\n     * @param token - The token to enable or disable claiming.\\n     * @param enable - True if the token can be claimed, false otherwise.\\n     */\\n    function enableTokenClaiming(IERC20 token, bool enable) external override onlyOwner {\\n        _tokenClaimingEnabled[token] = enable;\\n        emit TokenClaimingEnabled(token, enable);\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev It is required that both the global, token and user state have been properly checkpointed\\n     * before calling this function.\\n     */\\n    function _claimToken(address user, IERC20 token) internal returns (uint256) {\\n        TokenState storage tokenState = _tokenState[token];\\n        uint256 nextUserTokenWeekToClaim = _getUserTokenTimeCursor(user, token);\\n\\n        // The first week which cannot be correctly claimed is the earliest of:\\n        // - A) The global or user time cursor (whichever is earliest), rounded up to the end of the week.\\n        // - B) The token time cursor, rounded down to the beginning of the week.\\n        //\\n        // This prevents the two failure modes:\\n        // - A) A user may claim a week for which we have not processed their balance, resulting in tokens being locked.\\n        // - B) A user may claim a week which then receives more tokens to be distributed. However the user has\\n        //      already claimed for that week so their share of these new tokens are lost.\\n        uint256 firstUnclaimableWeek = Math.min(_roundUpTimestamp(Math.min(_timeCursor, _userState[user].timeCursor)), _roundDownTimestamp(tokenState.timeCursor));\\n\\n        mapping(uint256 => uint256) storage tokensPerWeek = _tokensPerWeek[token];\\n        mapping(uint256 => uint256) storage userBalanceAtTimestamp = _userBalanceAtTimestamp[user];\\n\\n        uint256 amount;\\n        for (uint256 i = 0; i < 20; ++i) {\\n            // We clearly cannot claim for `firstUnclaimableWeek` and so we break here.\\n            if (nextUserTokenWeekToClaim >= firstUnclaimableWeek) break;\\n\\n            amount += (tokensPerWeek[nextUserTokenWeekToClaim] * userBalanceAtTimestamp[nextUserTokenWeekToClaim]) / _veSupplyCache[nextUserTokenWeekToClaim];\\n            nextUserTokenWeekToClaim += 1 weeks;\\n        }\\n        // Update the stored user-token time cursor to prevent this user claiming this week again.\\n        _userTokenTimeCursor[user][token] = nextUserTokenWeekToClaim;\\n\\n        if (amount > 0) {\\n            // For a token to be claimable it must have been added to the cached balance so this is safe.\\n            tokenState.cachedBalance = uint128(tokenState.cachedBalance - amount);\\n            token.safeTransfer(user, amount);\\n            emit TokensClaimed(user, token, amount, nextUserTokenWeekToClaim);\\n        }\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Calculate the amount of `token` to be distributed to `_votingEscrow` holders since the last checkpoint.\\n     */\\n    function _checkpointToken(IERC20 token, bool force) internal {\\n        TokenState storage tokenState = _tokenState[token];\\n        uint256 lastTokenTime = tokenState.timeCursor;\\n        uint256 timeSinceLastCheckpoint;\\n        if (lastTokenTime == 0) {\\n            // Prevent someone from assigning tokens to an inaccessible week.\\n            require(block.timestamp > _startTime, \\\"Fee distribution has not started yet\\\");\\n\\n            // If it's the first time we're checkpointing this token then start distributing from now.\\n            // Also mark at which timestamp users should start attempts to claim this token from.\\n            lastTokenTime = block.timestamp;\\n            tokenState.startTime = uint64(_roundDownTimestamp(block.timestamp));\\n        } else {\\n            timeSinceLastCheckpoint = block.timestamp - lastTokenTime;\\n\\n            if (!force) {\\n                // Checkpointing N times within a single week is completely equivalent to checkpointing once at the end.\\n                // We then want to get as close as possible to a single checkpoint every Wed 23:59 UTC to save gas.\\n\\n                // We then skip checkpointing if we're in the same week as the previous checkpoint.\\n                bool alreadyCheckpointedThisWeek = _roundDownTimestamp(block.timestamp) == _roundDownTimestamp(lastTokenTime);\\n                // However we want to ensure that all of this week's fees are assigned to the current week without\\n                // overspilling into the next week. To mitigate this, we checkpoint if we're near the end of the week.\\n                bool nearingEndOfWeek = _roundUpTimestamp(block.timestamp) - block.timestamp < 1 days;\\n\\n                // This ensures that we checkpoint once at the beginning of the week and again for each user interaction\\n                // towards the end of the week to give an accurate final reading of the balance.\\n                if (alreadyCheckpointedThisWeek && !nearingEndOfWeek) {\\n                    return;\\n                }\\n            }\\n        }\\n\\n        tokenState.timeCursor = uint64(block.timestamp);\\n\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        uint256 newTokensToDistribute = tokenBalance.sub(tokenState.cachedBalance);\\n        if (newTokensToDistribute == 0) return;\\n        require(tokenBalance <= type(uint128).max, \\\"Maximum token balance exceeded\\\");\\n        tokenState.cachedBalance = uint128(tokenBalance);\\n\\n        uint256 firstIncompleteWeek = _roundDownTimestamp(lastTokenTime);\\n        uint256 nextWeek = 0;\\n\\n        // Distribute `newTokensToDistribute` evenly across the time period from `lastTokenTime` to now.\\n        // These tokens are assigned to weeks proportionally to how much of this period falls into each week.\\n        mapping(uint256 => uint256) storage tokensPerWeek = _tokensPerWeek[token];\\n        for (uint256 i = 0; i < 20; ++i) {\\n            // This is safe as we're incrementing a timestamp.\\n            nextWeek = firstIncompleteWeek + 1 weeks;\\n            if (block.timestamp < nextWeek) {\\n                // `firstIncompleteWeek` is now the beginning of the current week, i.e. this is the final iteration.\\n                if (timeSinceLastCheckpoint == 0 && block.timestamp == lastTokenTime) {\\n                    tokensPerWeek[firstIncompleteWeek] += newTokensToDistribute;\\n                } else {\\n                    // block.timestamp >= lastTokenTime by definition.\\n                    tokensPerWeek[firstIncompleteWeek] += (newTokensToDistribute * (block.timestamp - lastTokenTime)) / timeSinceLastCheckpoint;\\n                }\\n                // As we've caught up to the present then we should now break.\\n                break;\\n            } else {\\n                // We've gone a full week or more without checkpointing so need to distribute tokens to previous weeks.\\n                if (timeSinceLastCheckpoint == 0 && nextWeek == lastTokenTime) {\\n                    // It shouldn't be possible to enter this block\\n                    tokensPerWeek[firstIncompleteWeek] += newTokensToDistribute;\\n                } else {\\n                    // nextWeek > lastTokenTime by definition.\\n                    tokensPerWeek[firstIncompleteWeek] += (newTokensToDistribute * (nextWeek - lastTokenTime)) / timeSinceLastCheckpoint;\\n                }\\n            }\\n\\n            // We've now \\\"checkpointed\\\" up to the beginning of next week so must update timestamps appropriately.\\n            lastTokenTime = nextWeek;\\n            firstIncompleteWeek = nextWeek;\\n        }\\n\\n        emit TokenCheckpointed(token, newTokensToDistribute, lastTokenTime);\\n    }\\n\\n    /**\\n     * @dev Cache the `user`'s balance of `_votingEscrow` at the beginning of each new week\\n     */\\n    function _checkpointUserBalance(address user) internal {\\n        uint256 maxUserEpoch = _votingEscrow.user_point_epoch(user);\\n\\n        // If user has no epochs then they have never locked STG.\\n        // They clearly will not then receive fees.\\n        require(maxUserEpoch > 0, \\\"veSTG balance is zero\\\");\\n\\n        UserState storage userState = _userState[user];\\n\\n        // `nextWeekToCheckpoint` represents the timestamp of the beginning of the first week\\n        // which we haven't checkpointed the user's VotingEscrow balance yet.\\n        uint256 nextWeekToCheckpoint = userState.timeCursor;\\n\\n        uint256 userEpoch;\\n        if (nextWeekToCheckpoint == 0) {\\n            // First checkpoint for user so need to do the initial binary search\\n            userEpoch = _findTimestampUserEpoch(user, _startTime, 0, maxUserEpoch);\\n        } else {\\n            if (nextWeekToCheckpoint >= block.timestamp) {\\n                // User has checkpointed the current week already so perform early return.\\n                // This prevents a user from processing epochs created later in this week, however this is not an issue\\n                // as if a significant number of these builds up then the user will skip past them with a binary search.\\n                return;\\n            }\\n\\n            // Otherwise use the value saved from last time\\n            userEpoch = userState.lastEpochCheckpointed;\\n\\n            // This optimizes a scenario common for power users, which have frequent `VotingEscrow` interactions in\\n            // the same week. We assume that any such user is also claiming fees every week, and so we only perform\\n            // a binary search here rather than integrating it into the main search algorithm, effectively skipping\\n            // most of the week's irrelevant checkpoints.\\n            // The slight tradeoff is that users who have multiple infrequent `VotingEscrow` interactions and also don't\\n            // claim frequently will also perform the binary search, despite it not leading to gas savings.\\n            if (maxUserEpoch - userEpoch > 20) {\\n                userEpoch = _findTimestampUserEpoch(user, nextWeekToCheckpoint, userEpoch, maxUserEpoch);\\n            }\\n        }\\n\\n        // Epoch 0 is always empty so bump onto the next one so that we start on a valid epoch.\\n        if (userEpoch == 0) {\\n            userEpoch = 1;\\n        }\\n\\n        IVotingEscrow.Point memory nextUserPoint = _votingEscrow.user_point_history(user, userEpoch);\\n\\n        // If this is the first checkpoint for the user, calculate the first week they're eligible for.\\n        // i.e. the timestamp of the first Thursday after they locked.\\n        // If this is earlier then the first distribution then fast forward to then.\\n        if (nextWeekToCheckpoint == 0) {\\n            // Disallow checkpointing before `startTime`.\\n            require(block.timestamp > _startTime, \\\"Fee distribution has not started yet\\\");\\n            nextWeekToCheckpoint = Math.max(_startTime, _roundUpTimestamp(nextUserPoint.ts));\\n            userState.startTime = uint64(nextWeekToCheckpoint);\\n        }\\n\\n        // It's safe to increment `userEpoch` and `nextWeekToCheckpoint` in this loop as epochs and timestamps\\n        // are always much smaller than 2^256 and are being incremented by small values.\\n        IVotingEscrow.Point memory currentUserPoint;\\n        for (uint256 i = 0; i < 50; ++i) {\\n            if (nextWeekToCheckpoint >= nextUserPoint.ts && userEpoch <= maxUserEpoch) {\\n                // The week being considered is contained in a user epoch after that described by `currentUserPoint`.\\n                // We then shift `nextUserPoint` into `currentUserPoint` and query the Point for the next user epoch.\\n                // We do this in order to step though epochs until we find the first epoch starting after\\n                // `nextWeekToCheckpoint`, making the previous epoch the one that contains `nextWeekToCheckpoint`.\\n                userEpoch += 1;\\n                currentUserPoint = nextUserPoint;\\n                if (userEpoch > maxUserEpoch) {\\n                    nextUserPoint = IVotingEscrow.Point(0, 0, 0, 0);\\n                } else {\\n                    nextUserPoint = _votingEscrow.user_point_history(user, userEpoch);\\n                }\\n            } else {\\n                // The week being considered lies inside the user epoch described by `oldUserPoint`\\n                // we can then use it to calculate the user's balance at the beginning of the week.\\n                if (nextWeekToCheckpoint >= block.timestamp) {\\n                    // Break if we're trying to cache the user's balance at a timestamp in the future.\\n                    // We only perform this check here to ensure that we can still process checkpoints created\\n                    // in the current week.\\n                    break;\\n                }\\n\\n                int128 dt = int128(nextWeekToCheckpoint - currentUserPoint.ts);\\n                uint256 userBalance = currentUserPoint.bias > currentUserPoint.slope * dt ? uint256(currentUserPoint.bias - currentUserPoint.slope * dt) : 0;\\n\\n                // User's lock has expired and they haven't relocked yet.\\n                if (userBalance == 0 && userEpoch > maxUserEpoch) {\\n                    nextWeekToCheckpoint = _roundUpTimestamp(block.timestamp);\\n                    break;\\n                }\\n\\n                // User had a nonzero lock and so is eligible to collect fees.\\n                _userBalanceAtTimestamp[user][nextWeekToCheckpoint] = userBalance;\\n\\n                nextWeekToCheckpoint += 1 weeks;\\n            }\\n        }\\n\\n        // We subtract off 1 from the userEpoch to step back once so that on the next attempt to checkpoint\\n        // the current `currentUserPoint` will be loaded as `nextUserPoint`. This ensures that we can't skip over the\\n        // user epoch containing `nextWeekToCheckpoint`.\\n        // userEpoch > 0 so this is safe.\\n        userState.lastEpochCheckpointed = uint64(userEpoch - 1);\\n        userState.timeCursor = uint64(nextWeekToCheckpoint);\\n    }\\n\\n    /**\\n     * @dev Cache the totalSupply of VotingEscrow token at the beginning of each new week\\n     */\\n    function _checkpointTotalSupply() internal {\\n        uint256 nextWeekToCheckpoint = _timeCursor;\\n        uint256 weekStart = _roundDownTimestamp(block.timestamp);\\n\\n        // We expect `timeCursor == weekStart + 1 weeks` when fully up to date.\\n        if (nextWeekToCheckpoint > weekStart || weekStart == block.timestamp) {\\n            // We've already checkpointed up to this week so perform early return\\n            return;\\n        }\\n\\n        _votingEscrow.checkpoint();\\n\\n        // Step through the each week and cache the total supply at beginning of week on this contract\\n        for (uint256 i = 0; i < 20; ++i) {\\n            if (nextWeekToCheckpoint > weekStart) break;\\n\\n            // NOTE: Replaced Balancer's logic with Solidly/Velodrome implementation due to the differences in the VotingEscrow totalSupply function\\n            // See https://github.com/velodrome-finance/v1/blob/master/contracts/RewardsDistributor.sol#L143\\n\\n            uint256 epoch = _findTimestampEpoch(nextWeekToCheckpoint);\\n            IVotingEscrow.Point memory pt = _votingEscrow.point_history(epoch);\\n\\n            int128 dt = nextWeekToCheckpoint > pt.ts ? int128(nextWeekToCheckpoint - pt.ts) : 0;\\n            int128 supply = pt.bias - pt.slope * dt;\\n            _veSupplyCache[nextWeekToCheckpoint] = supply > 0 ? uint256(supply) : 0;\\n\\n            // This is safe as we're incrementing a timestamp\\n            nextWeekToCheckpoint += 1 weeks;\\n        }\\n        // Update state to the end of the current week (`weekStart` + 1 weeks)\\n        _timeCursor = nextWeekToCheckpoint;\\n    }\\n\\n    // Helper functions\\n\\n    /**\\n     * @dev Wrapper around `_userTokenTimeCursor` which returns the start timestamp for `token`\\n     * if `user` has not attempted to interact with it previously.\\n     */\\n    function _getUserTokenTimeCursor(address user, IERC20 token) internal view returns (uint256) {\\n        uint256 userTimeCursor = _userTokenTimeCursor[user][token];\\n        if (userTimeCursor > 0) return userTimeCursor;\\n        // This is the first time that the user has interacted with this token.\\n        // We then start from the latest out of either when `user` first locked veSTG or `token` was first checkpointed.\\n        return Math.max(_userState[user].startTime, _tokenState[token].startTime);\\n    }\\n\\n    /**\\n     * @dev Return the user epoch number for `user` corresponding to the provided `timestamp`\\n     */\\n    function _findTimestampUserEpoch(address user, uint256 timestamp, uint256 minUserEpoch, uint256 maxUserEpoch) internal view returns (uint256) {\\n        uint256 min = minUserEpoch;\\n        uint256 max = maxUserEpoch;\\n\\n        // Perform binary search through epochs to find epoch containing `timestamp`\\n        for (uint256 i = 0; i < 128; ++i) {\\n            if (min >= max) break;\\n\\n            // Algorithm assumes that inputs are less than 2^128 so this operation is safe.\\n            // +2 avoids getting stuck in min == mid < max\\n            uint256 mid = (min + max + 2) / 2;\\n            IVotingEscrow.Point memory pt = _votingEscrow.user_point_history(user, mid);\\n            if (pt.ts <= timestamp) {\\n                min = mid;\\n            } else {\\n                // max > min so this is safe.\\n                max = mid - 1;\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /**\\n     * @dev Return the global epoch number corresponding to the provided `timestamp`\\n     */\\n    function _findTimestampEpoch(uint256 timestamp) internal view returns (uint256) {\\n        uint256 min = 0;\\n        uint256 max = _votingEscrow.epoch();\\n\\n        // Perform binary search through epochs to find epoch containing `timestamp`\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (min >= max) break;\\n\\n            // Algorithm assumes that inputs are less than 2^128 so this operation is safe.\\n            // +2 avoids getting stuck in min == mid < max\\n            uint256 mid = (min + max + 2) / 2;\\n            IVotingEscrow.Point memory pt = _votingEscrow.point_history(mid);\\n            if (pt.ts <= timestamp) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /**\\n     * @dev Rounds the provided timestamp down to the beginning of the previous week (Thurs 00:00 UTC)\\n     */\\n    function _roundDownTimestamp(uint256 timestamp) private pure returns (uint256) {\\n        // Division by zero or overflows are impossible here.\\n        return (timestamp / 1 weeks) * 1 weeks;\\n    }\\n\\n    /**\\n     * @dev Rounds the provided timestamp up to the beginning of the next week (Thurs 00:00 UTC)\\n     */\\n    function _roundUpTimestamp(uint256 timestamp) private pure returns (uint256) {\\n        // Overflows are impossible here for all realistic inputs.\\n        return _roundDownTimestamp(timestamp + WEEK_MINUS_SECOND);\\n    }\\n\\n    /**\\n     * @dev Reverts if the provided token cannot be claimed.\\n     */\\n    function _checkIfClaimingEnabled(IERC20 token) private view {\\n        require(_tokenClaimingEnabled[token], \\\"Token is not allowed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd44b08af0a8bc54ff7135a9b9c84cef790075b6ac30384aa6e7171824b7e2738\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin-solc-0.7/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IVotingEscrow.sol\\\";\\n\\n/**\\n * @title Fee Distributor\\n * @notice Distributes any tokens transferred to the contract (e.g. Protocol fees) among veSTG\\n * holders proportionally based on a snapshot of the week at which the tokens are sent to the FeeDistributor contract.\\n * @dev Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veSTG\\n * holders simply transfer the tokens to the `FeeDistributor` contract and then call `checkpointToken`.\\n */\\ninterface IFeeDistributor {\\n    event TokenCheckpointed(IERC20 token, uint256 amount, uint256 lastCheckpointTimestamp);\\n    event TokensClaimed(address user, IERC20 token, uint256 amount, uint256 userTokenTimeCursor);\\n    event TokenWithdrawn(IERC20 token, uint256 amount, address recipient);\\n    event TokenClaimingEnabled(IERC20 token, bool enabled);\\n    event OnlyVeHolderClaimingEnabled(address user, bool enabled);\\n\\n    /**\\n     * @notice Returns the VotingEscrow (veSTG) token contract\\n     */\\n    function getVotingEscrow() external view returns (IVotingEscrow);\\n\\n    /**\\n     * @notice Returns the time when fee distribution starts.\\n     */\\n    function getStartTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the global time cursor representing the most earliest uncheckpointed week.\\n     */\\n    function getTimeCursor() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserTimeCursor(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user-level start time representing the first week they're eligible to claim tokens.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserStartTime(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice True if the given token can be claimed, false otherwise.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function canTokenBeClaimed(IERC20 token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the token-level start time representing the timestamp users could start claiming this token\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenStartTime(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenTimeCursor(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the token-level cached balance.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getTokenCachedBalance(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user-level last checkpointed epoch.\\n     * @param user - The address of the user to query.\\n     */\\n    function getUserLastEpochCheckpointed(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.\\n     * @param user - The address of the user to query.\\n     * @param token - The ERC20 token address to query.\\n     */\\n    function getUserTokenTimeCursor(address user, IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user's cached balance of veSTG as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.\\n     * @param user - The address of the user of which to read the cached balance of.\\n     * @param timestamp - The timestamp at which to read the `user`'s cached balance at.\\n     */\\n    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the cached total supply of veSTG as of the provided timestamp.\\n     * @dev Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values.\\n     * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.\\n     * @param timestamp - The timestamp at which to read the cached total supply at.\\n     */\\n    function getTotalSupplyAtTimestamp(uint256 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the FeeDistributor's cached balance of `token`.\\n     */\\n    function getTokenLastBalance(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of `token` which the FeeDistributor received in the week beginning at `timestamp`.\\n     * @param token - The ERC20 token address to query.\\n     * @param timestamp - The timestamp corresponding to the beginning of the week of interest.\\n     */\\n    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external view returns (uint256);\\n\\n    // Preventing third-party claiming\\n\\n    /**\\n     * @notice Enables / disables rewards claiming only by the VotingEscrow holder for the message sender.\\n     * @param enabled - True if only the VotingEscrow holder can claim their rewards, false otherwise.\\n     */\\n    function enableOnlyVeHolderClaiming(bool enabled) external;\\n\\n    /**\\n     * @notice Returns true if only the VotingEscrow holder can claim their rewards, false otherwise.\\n     */\\n    function onlyVeHolderClaimingEnabled(address user) external view returns (bool);\\n\\n    // Depositing\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev Sending tokens directly to the FeeDistributor instead of using `depositTokens` may result in tokens being\\n     * retroactively distributed to past weeks, or for the distribution to carry over to future weeks.\\n     *\\n     * If for some reason `depositTokens` cannot be called, in order to ensure that all tokens are correctly distributed\\n     * manually call `checkpointToken` before and after the token transfer.\\n     * @param token - The ERC20 token address to distribute.\\n     * @param amount - The amount of tokens to deposit.\\n     */\\n    function depositToken(IERC20 token, uint256 amount) external;\\n\\n    /**\\n     * @notice Deposits tokens to be distributed in the current week.\\n     * @dev A version of `depositToken` which supports depositing multiple `tokens` at once.\\n     * See `depositToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to distribute.\\n     * @param amounts - An array of token amounts to deposit.\\n     */\\n    function depositTokens(IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    // Checkpointing\\n\\n    /**\\n     * @notice Caches the total supply of veSTG at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     */\\n    function checkpoint() external;\\n\\n    /**\\n     * @notice Caches the user's balance of veSTG at the beginning of each week.\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param user - The address of the user to be checkpointed.\\n     */\\n    function checkpointUser(address user) external;\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the FeeDistributor to weekly distributions.\\n     * @dev Any `token` balance held by the FeeDistributor above that which is returned by `getTokenLastBalance`\\n     * will be distributed evenly across the time period since `token` was last checkpointed.\\n     *\\n     * This function will be called automatically before claiming tokens to ensure the contract is properly updated.\\n     * @param token - The ERC20 token address to be checkpointed.\\n     */\\n    function checkpointToken(IERC20 token) external;\\n\\n    /**\\n     * @notice Assigns any newly-received tokens held by the FeeDistributor to weekly distributions.\\n     * @dev A version of `checkpointToken` which supports checkpointing multiple tokens.\\n     * See `checkpointToken` for more details.\\n     * @param tokens - An array of ERC20 token addresses to be checkpointed.\\n     */\\n    function checkpointTokens(IERC20[] calldata tokens) external;\\n\\n    // Claiming\\n\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\n\\n    // Governance\\n\\n    /**\\n     * @notice Withdraws the specified `amount` of the `token` from the contract to the `recipient`. Can be called only by Stargate DAO.\\n     * @param token - The token to withdraw.\\n     * @param amount - The amount to withdraw.\\n     * @param recipient - The address to transfer the tokens to.\\n     */\\n    function withdrawToken(IERC20 token, uint256 amount, address recipient) external;\\n\\n    /**\\n     * @notice Enables or disables claiming of the given token. Can be called only by Stargate DAO.\\n     * @param token - The token to enable or disable claiming.\\n     * @param enable - True if the token can be claimed, false otherwise.\\n     */\\n    function enableTokenClaiming(IERC20 token, bool enable) external;\\n}\\n\",\"keccak256\":\"0x9089c7ef0357398a3810f480fc66f7411a0f8a46bc4e48fda381df4430aff0e4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n// For compatibility, we're keeping the same function names as in the original Curve code, including the mixed-case\\n// naming convention.\\n// solhint-disable func-name-mixedcase\\n\\ninterface IVotingEscrow {\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // - dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function epoch() external view returns (uint256);\\n\\n    function balanceOfAtT(address user, uint256 timestamp) external view returns (uint256);\\n\\n    function totalSupplyAtT(uint256 timestamp) external view returns (uint256);\\n\\n    function user_point_epoch(address user) external view returns (uint256);\\n\\n    function point_history(uint256 timestamp) external view returns (Point memory);\\n\\n    function user_point_history(address user, uint256 timestamp) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function locked__end(address user) external view returns (uint256);\\n}\",\"keccak256\":\"0xbcfb9475dd06745f1250a20fb8be22eb56f2be92639dc467ce80f9f55b7ccd18\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002fc638038062002fc68339810160408190526200003491620001cb565b600062000040620001a6565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180556001600160601b0319606083901b16608052620000ab81620001aa565b90506000620000ba42620001aa565b905080821015620000e85760405162461bcd60e51b8152600401620000df90620002ca565b60405180910390fd5b60405163d1febfb960e01b81526000906001600160a01b0385169063d1febfb9906200011990849060040162000275565b60806040518083038186803b1580156200013257600080fd5b505afa15801562000147573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016d919062000205565b905080604001518311620001955760405162461bcd60e51b8152600401620000df906200027e565b505060a081905260025550620002ff565b3390565b62093a80808204025b919050565b8051600f81900b8114620001b357600080fd5b60008060408385031215620001de578182fd5b82516001600160a01b0381168114620001f5578283fd5b6020939093015192949293505050565b60006080828403121562000217578081fd5b604051608081016001600160401b03811182821017156200023457fe5b6040526200024283620001b8565b81526200025260208401620001b8565b602082015260408301516040820152606083015160608201528091505092915050565b90815260200190565b6020808252602c908201527f43616e6e6f74207374617274206265666f726520566f74696e67457363726f7760408201526b040ccd2e4e6e840cae0dec6d60a31b606082015260800190565b6020808252818101527f43616e6e6f74207374617274206265666f72652063757272656e74207765656b604082015260600190565b60805160601c60a051612c646200036260003980610ce452806112085280611355528061139752806116df525080610405528061112252806112c5528061149d5280611c345280611ccf528061200b528061221052806122f55250612c646000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806389d11a5911610104578063c8a0f2d5116100a2578063de2283ab11610071578063de2283ab146103b7578063de681faf146103ca578063f14045ac146103dd578063f2fde38b146103f0576101da565b8063c8a0f2d514610232578063ca31879d1461037e578063cc08736414610391578063d3dc4ca1146103a4576101da565b8063a3208f82116100de578063a3208f821461033b578063acbc14281461035b578063c2c4c5c11461036e578063c828371e14610376576101da565b806389d11a591461030d5780638da5cb5b14610320578063905d10ac14610328576101da565b80633ccdbb281161017c5780638050a7ee1161014b5780638050a7ee146102bf57806382aa5ad4146102d2578063876e69a1146102da57806388720467146102ed576101da565b80633ccdbb281461027e5780634f3c509014610291578063715018a6146102a45780637b8d6221146102ac576101da565b80632308805b116101b85780632308805b14610232578063286d5e7f14610245578063338b5dea146102585780633902b9bc1461026b576101da565b806308b0308a146101df5780630c59ef34146101fd57806314866e081461021d575b600080fd5b6101e7610403565b6040516101f49190612932565b60405180910390f35b61021061020b36600461268d565b610427565b6040516101f49190612b9a565b61023061022b36600461268d565b610450565b005b61021061024036600461268d565b6104bd565b61021061025336600461268d565b6104fe565b610230610266366004612734565b61053f565b61023061027936600461268d565b6105da565b61023061028c366004612856565b610654565b61021061029f366004612902565b61071c565b61023061072e565b6102306102ba36600461279f565b610804565b6102106102cd3660046126fc565b610972565b610210610987565b6102106102e836600461268d565b61098d565b6103006102fb3660046126a9565b6109be565b6040516101f491906129a3565b61021061031b36600461268d565b610b5b565b6101e7610b80565b61023061033636600461275f565b610b8f565b61034e61034936600461268d565b610c28565b6040516101f491906129db565b61021061036936600461268d565b610c46565b610230610c77565b610210610ce2565b61021061038c3660046126fc565b610d06565b61023061039f366004612808565b610ded565b6102106103b2366004612734565b610e61565b61034e6103c536600461268d565b610e89565b6102106103d8366004612734565b610ea7565b6102306103eb366004612822565b610ecf565b6102306103fe36600461268d565b610fc3565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b03811660009081526007602052604090205467ffffffffffffffff165b919050565b600260015414156104a8576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556104b6816110ef565b5060018055565b6001600160a01b031660009081526004602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690565b6001600160a01b031660009081526007602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690565b60026001541415610597576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155816105a68161166c565b6105b18360006116a4565b6105c66001600160a01b038416333085611a74565b6105d18360016116a4565b50506001805550565b60026001541415610632576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155806106418161166c565b61064c8260016116a4565b505060018055565b61065c611b02565b6001600160a01b031661066d610b80565b6001600160a01b0316146106c8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6106dc6001600160a01b0384168284611b06565b7fa0524ee0fd8662d6c046d199da2a6d3dc49445182cec055873a5bb9c2843c8e083838360405161070f939291906129e6565b60405180910390a1505050565b60009081526003602052604090205490565b610736611b02565b6001600160a01b0316610747610b80565b6001600160a01b0316146107a2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6002600154141561085c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001558281146108895760405162461bcd60e51b815260040161088090612b63565b60405180910390fd5b8260005b81811015610966576108be8686838181106108a457fe5b90506020020160208101906108b9919061268d565b61166c565b6108e98686838181106108cd57fe5b90506020020160208101906108e2919061268d565b60006116a4565b61093333308686858181106108fa57fe5b9050602002013589898681811061090d57fe5b9050602002016020810190610922919061268d565b6001600160a01b0316929190611a74565b61095e86868381811061094257fe5b9050602002016020810190610957919061268d565b60016116a4565b60010161088d565b50506001805550505050565b600061097e8383611b8b565b90505b92915050565b60025490565b6001600160a01b031660009081526007602052604090205468010000000000000000900467ffffffffffffffff1690565b606060026001541415610a18576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556001600160a01b0384166000908152600a6020526040902054849060ff1615610a6857336001600160a01b03821614610a685760405162461bcd60e51b815260040161088090612af5565b83838060005b81811015610a8d57610a858484838181106108a457fe5b600101610a6e565b50610a96611c09565b610a9f886110ef565b8560008167ffffffffffffffff81118015610ab957600080fd5b50604051908082528060200260200182016040528015610ae3578160200160208202803683370190505b50905060005b82811015610b4957610b008a8a838181106108cd57fe5b610b2a8b8b8b84818110610b1057fe5b9050602002016020810190610b25919061268d565b611dd8565b828281518110610b3657fe5b6020908102919091010152600101610ae9565b50600180559998505050505050505050565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6000546001600160a01b031690565b60026001541415610be7576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001558060005b81811015610c1e57610c078484838181106108a457fe5b610c1684848381811061094257fe5b600101610bf0565b5050600180555050565b6001600160a01b03166000908152600a602052604090205460ff1690565b6001600160a01b031660009081526004602052604090205468010000000000000000900467ffffffffffffffff1690565b60026001541415610ccf576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155610cdc611c09565b60018055565b7f000000000000000000000000000000000000000000000000000000000000000090565b600060026001541415610d60576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556001600160a01b0383166000908152600a6020526040902054839060ff1615610db057336001600160a01b03821614610db05760405162461bcd60e51b815260040161088090612af5565b82610dba8161166c565b610dc2611c09565b610dcb856110ef565b610dd68460006116a4565b610de08585611dd8565b6001805595945050505050565b336000818152600a60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016841515179055517f5df4db5082ff794d02e809cecb2c56f2ac683e734a0b4d1e03fd82b3da056c7191610e56918490612946565b60405180910390a150565b6001600160a01b03919091166000908152600560209081526040808320938352929052205490565b6001600160a01b031660009081526006602052604090205460ff1690565b6001600160a01b03919091166000908152600860209081526040808320938352929052205490565b610ed7611b02565b6001600160a01b0316610ee8610b80565b6001600160a01b031614610f43576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166000908152600660205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831515179055517f359cee3647456cdac70428f1f028ea08d4bafdc5703fc14df9625b49f4398c9d90610fb79084908490612946565b60405180910390a15050565b610fcb611b02565b6001600160a01b0316610fdc610b80565b6001600160a01b031614611037576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661107c5760405162461bcd60e51b8152600401808060200182810382526026815260200180612bb96026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6040517f010ae7570000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063010ae75790611157908590600401612932565b60206040518083038186803b15801561116f57600080fd5b505afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a7919061291a565b9050600081116111c95760405162461bcd60e51b815260040161088090612b2c565b6001600160a01b0382166000908152600760205260408120805490916801000000000000000090910467ffffffffffffffff1690816112365761122f857f0000000000000000000000000000000000000000000000000000000000000000600087611fb4565b9050611289565b4282106112465750505050611669565b50815470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16601481850311156112895761128685838387611fb4565b90505b80611292575060015b6040517f28d09d470000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328d09d47906112fc908990869060040161298a565b60806040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190612897565b9050826113fd577f000000000000000000000000000000000000000000000000000000000000000042116113925760405162461bcd60e51b815260040161088090612a98565b6113c87f00000000000000000000000000000000000000000000000000000000000000006113c383604001516120c4565b6120d4565b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff821617855592505b6114056125f4565b60005b60328110156115d057826040015185101580156114255750868411155b1561152c576001840193508291508684111561146d5760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611527565b6040517f28d09d470000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328d09d47906114d4908b90889060040161298a565b60806040518083038186803b1580156114ec57600080fd5b505afa158015611500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115249190612897565b92505b6115c8565b428510611538576115d0565b6000826040015186039050600081846020015102600f0b8460000151600f0b13611563576000611574565b81846020015102846000015103600f0b5b90508015801561158357508886115b1561159a57611591426120c4565b965050506115d0565b6001600160a01b038a1660009081526008602090815260408083208a84529091529020555062093a80909401935b600101611408565b505083546fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9290920167ffffffffffffffff90811670010000000000000000000000000000000002929092177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000093909216929092021790915550505b50565b6001600160a01b03811660009081526006602052604090205460ff166116695760405162461bcd60e51b815260040161088090612a2a565b6001600160a01b0382166000908152600460205260408120805490916801000000000000000090910467ffffffffffffffff169081611761577f0000000000000000000000000000000000000000000000000000000000000000421161171c5760405162461bcd60e51b815260040161088090612a98565b429150611728426120eb565b83547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff919091161783556117b3565b8142039050836117b3576000611776836120eb565b61177f426120eb565b14905060006201518042611792426120c4565b031090508180156117a1575080155b156117b0575050505050611a70565b50505b82547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000004267ffffffffffffffff16021783556040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038716906370a0823190611838903090600401612932565b60206040518083038186803b15801561185057600080fd5b505afa158015611864573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611888919061291a565b84549091506000906118c190839070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166120f7565b9050806118d2575050505050611a70565b6fffffffffffffffffffffffffffffffff8211156119025760405162461bcd60e51b815260040161088090612a61565b84546fffffffffffffffffffffffffffffffff808416700100000000000000000000000000000000029116178555600061193b856120eb565b6001600160a01b038916600090815260056020526040812091925090815b6014811015611a2b578362093a80019250824210156119c9578615801561197f57508742145b1561199d5760008481526020839052604090208054860190556119c4565b868842038602816119aa57fe5b600086815260208590526040902080549290910490910190555b611a2b565b861580156119d657508783145b156119f4576000848152602083905260409020805486019055611a1b565b86888403860281611a0157fe5b600086815260208590526040902080549290910490910190555b9196508692508291600101611959565b507f9b7f1a85a4c9b4e59e1b6527d9969c50cdfb3a1a467d0c4a51fb0ed8bf07f1308a8589604051611a5f93929190612a09565b60405180910390a150505050505050505b5050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611afc908590612154565b50505050565b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611b86908490612154565b505050565b6001600160a01b0380831660009081526009602090815260408083209385168352929052908120548015611bc0579050610981565b6001600160a01b0380851660009081526007602090815260408083205493871683526004909152902054611c019167ffffffffffffffff90811691166120d4565b949350505050565b6002546000611c17426120eb565b905080821180611c2657504281145b15611c32575050611dd6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611c8d57600080fd5b505af1158015611ca1573d6000803e3d6000fd5b5050505060005b6014811015611dd05781831115611cbe57611dd0565b6000611cc984612205565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d1febfb9836040518263ffffffff1660e01b8152600401611d199190612b9a565b60806040518083038186803b158015611d3157600080fd5b505afa158015611d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d699190612897565b9050600081604001518611611d7f576000611d87565b816040015186035b60208301518351919250820290036000600f82900b13611da8576000611dad565b80600f0b5b600088815260036020526040902055505062093a80909401935050600101611ca8565b50506002555b565b6001600160a01b038116600090815260046020526040812081611dfb8585611b8b565b6002546001600160a01b03871660009081526007602052604081205492935091611e6e91611e4891611e43919068010000000000000000900467ffffffffffffffff166123a9565b6120c4565b8454611e699068010000000000000000900467ffffffffffffffff166120eb565b6123a9565b6001600160a01b038087166000908152600560209081526040808320938b16835260089091528120929350909190805b6014811015611ef257848610611eb357611ef2565b60008681526003602090815260408083205486835281842054928890529220540281611edb57fe5b62093a809790970196049190910190600101611e9e565b506001600160a01b03808a166000908152600960209081526040808320938c168352929052208590558015611fa85785546fffffffffffffffffffffffffffffffff70010000000000000000000000000000000080830482168490038216029116178655611f6a6001600160a01b0389168a83611b06565b7fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de689898388604051611f9f9493929190612961565b60405180910390a15b98975050505050505050565b60008282825b60808110156120b857818310611fcf576120b8565b6040517f28d09d470000000000000000000000000000000000000000000000000000000081526002838501810104906000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328d09d4790612042908d90869060040161298a565b60806040518083038186803b15801561205a57600080fd5b505afa15801561206e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120929190612897565b9050888160400151116120a7578194506120ae565b6001820393505b5050600101611fba565b50909695505050505050565b600061098162093a7f83016120eb565b6000818310156120e4578161097e565b5090919050565b62093a80908190040290565b60008282111561214e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006121a9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123b89092919063ffffffff16565b805190915015611b86578080602001905160208110156121c857600080fd5b5051611b865760405162461bcd60e51b815260040180806020018281038252602a815260200180612c05602a913960400191505060405180910390fd5b6000806000905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561226757600080fd5b505afa15801561227b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229f919061291a565b905060005b60808110156123a0578183106122b9576123a0565b6040517fd1febfb90000000000000000000000000000000000000000000000000000000081526002838501810104906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d1febfb99061232a908590600401612b9a565b60806040518083038186803b15801561234257600080fd5b505afa158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a9190612897565b90508681604001511161238f57819450612396565b6001820393505b50506001016122a4565b50909392505050565b60008183106120e4578161097e565b60606123c784846000856123d1565b90505b9392505050565b6060824710156124125760405162461bcd60e51b8152600401808060200182810382526026815260200180612bdf6026913960400191505060405180910390fd5b61241b8561254a565b61246c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106124c857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161248b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461252a576040519150601f19603f3d011682016040523d82523d6000602084013e61252f565b606091505b509150915061253f828286612550565b979650505050505050565b3b151590565b6060831561255f5750816123ca565b82511561256f5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125b95781810151838201526020016125a1565b50505050905090810190601f1680156125e65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405180608001604052806000600f0b81526020016000600f0b815260200160008152602001600081525090565b60008083601f840112612633578182fd5b50813567ffffffffffffffff81111561264a578182fd5b602083019150836020808302850101111561266457600080fd5b9250929050565b8035801515811461044b57600080fd5b8051600f81900b811461044b57600080fd5b60006020828403121561269e578081fd5b81356123ca81612ba3565b6000806000604084860312156126bd578182fd5b83356126c881612ba3565b9250602084013567ffffffffffffffff8111156126e3578283fd5b6126ef86828701612622565b9497909650939450505050565b6000806040838503121561270e578182fd5b823561271981612ba3565b9150602083013561272981612ba3565b809150509250929050565b60008060408385031215612746578182fd5b823561275181612ba3565b946020939093013593505050565b60008060208385031215612771578182fd5b823567ffffffffffffffff811115612787578283fd5b61279385828601612622565b90969095509350505050565b600080600080604085870312156127b4578081fd5b843567ffffffffffffffff808211156127cb578283fd5b6127d788838901612622565b909650945060208701359150808211156127ef578283fd5b506127fc87828801612622565b95989497509550505050565b600060208284031215612819578081fd5b61097e8261266b565b60008060408385031215612834578182fd5b823561283f81612ba3565b915061284d6020840161266b565b90509250929050565b60008060006060848603121561286a578283fd5b833561287581612ba3565b925060208401359150604084013561288c81612ba3565b809150509250925092565b6000608082840312156128a8578081fd5b6040516080810181811067ffffffffffffffff821117156128c557fe5b6040526128d18361267b565b81526128df6020840161267b565b602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215612913578081fd5b5035919050565b60006020828403121561292b578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156120b8578351835292840192918401916001016129bf565b901515815260200190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b60208082526014908201527f546f6b656e206973206e6f7420616c6c6f776564000000000000000000000000604082015260600190565b6020808252601e908201527f4d6178696d756d20746f6b656e2062616c616e63652065786365656465640000604082015260600190565b60208082526024908201527f46656520646973747269627574696f6e20686173206e6f74207374617274656460408201527f2079657400000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f436c61696d696e67206973206e6f7420616c6c6f776564000000000000000000604082015260600190565b60208082526015908201527f76655354472062616c616e6365206973207a65726f0000000000000000000000604082015260600190565b60208082526015908201527f496e707574206c656e677468206d69736d617463680000000000000000000000604082015260600190565b90815260200190565b6001600160a01b038116811461166957600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220ed016ceb092c9550649e4c44527b0d19d8e48c83a3744d0b7901b08f3419abb364736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806389d11a5911610104578063c8a0f2d5116100a2578063de2283ab11610071578063de2283ab146103b7578063de681faf146103ca578063f14045ac146103dd578063f2fde38b146103f0576101da565b8063c8a0f2d514610232578063ca31879d1461037e578063cc08736414610391578063d3dc4ca1146103a4576101da565b8063a3208f82116100de578063a3208f821461033b578063acbc14281461035b578063c2c4c5c11461036e578063c828371e14610376576101da565b806389d11a591461030d5780638da5cb5b14610320578063905d10ac14610328576101da565b80633ccdbb281161017c5780638050a7ee1161014b5780638050a7ee146102bf57806382aa5ad4146102d2578063876e69a1146102da57806388720467146102ed576101da565b80633ccdbb281461027e5780634f3c509014610291578063715018a6146102a45780637b8d6221146102ac576101da565b80632308805b116101b85780632308805b14610232578063286d5e7f14610245578063338b5dea146102585780633902b9bc1461026b576101da565b806308b0308a146101df5780630c59ef34146101fd57806314866e081461021d575b600080fd5b6101e7610403565b6040516101f49190612932565b60405180910390f35b61021061020b36600461268d565b610427565b6040516101f49190612b9a565b61023061022b36600461268d565b610450565b005b61021061024036600461268d565b6104bd565b61021061025336600461268d565b6104fe565b610230610266366004612734565b61053f565b61023061027936600461268d565b6105da565b61023061028c366004612856565b610654565b61021061029f366004612902565b61071c565b61023061072e565b6102306102ba36600461279f565b610804565b6102106102cd3660046126fc565b610972565b610210610987565b6102106102e836600461268d565b61098d565b6103006102fb3660046126a9565b6109be565b6040516101f491906129a3565b61021061031b36600461268d565b610b5b565b6101e7610b80565b61023061033636600461275f565b610b8f565b61034e61034936600461268d565b610c28565b6040516101f491906129db565b61021061036936600461268d565b610c46565b610230610c77565b610210610ce2565b61021061038c3660046126fc565b610d06565b61023061039f366004612808565b610ded565b6102106103b2366004612734565b610e61565b61034e6103c536600461268d565b610e89565b6102106103d8366004612734565b610ea7565b6102306103eb366004612822565b610ecf565b6102306103fe36600461268d565b610fc3565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b03811660009081526007602052604090205467ffffffffffffffff165b919050565b600260015414156104a8576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556104b6816110ef565b5060018055565b6001600160a01b031660009081526004602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690565b6001600160a01b031660009081526007602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690565b60026001541415610597576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155816105a68161166c565b6105b18360006116a4565b6105c66001600160a01b038416333085611a74565b6105d18360016116a4565b50506001805550565b60026001541415610632576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155806106418161166c565b61064c8260016116a4565b505060018055565b61065c611b02565b6001600160a01b031661066d610b80565b6001600160a01b0316146106c8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6106dc6001600160a01b0384168284611b06565b7fa0524ee0fd8662d6c046d199da2a6d3dc49445182cec055873a5bb9c2843c8e083838360405161070f939291906129e6565b60405180910390a1505050565b60009081526003602052604090205490565b610736611b02565b6001600160a01b0316610747610b80565b6001600160a01b0316146107a2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6002600154141561085c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001558281146108895760405162461bcd60e51b815260040161088090612b63565b60405180910390fd5b8260005b81811015610966576108be8686838181106108a457fe5b90506020020160208101906108b9919061268d565b61166c565b6108e98686838181106108cd57fe5b90506020020160208101906108e2919061268d565b60006116a4565b61093333308686858181106108fa57fe5b9050602002013589898681811061090d57fe5b9050602002016020810190610922919061268d565b6001600160a01b0316929190611a74565b61095e86868381811061094257fe5b9050602002016020810190610957919061268d565b60016116a4565b60010161088d565b50506001805550505050565b600061097e8383611b8b565b90505b92915050565b60025490565b6001600160a01b031660009081526007602052604090205468010000000000000000900467ffffffffffffffff1690565b606060026001541415610a18576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556001600160a01b0384166000908152600a6020526040902054849060ff1615610a6857336001600160a01b03821614610a685760405162461bcd60e51b815260040161088090612af5565b83838060005b81811015610a8d57610a858484838181106108a457fe5b600101610a6e565b50610a96611c09565b610a9f886110ef565b8560008167ffffffffffffffff81118015610ab957600080fd5b50604051908082528060200260200182016040528015610ae3578160200160208202803683370190505b50905060005b82811015610b4957610b008a8a838181106108cd57fe5b610b2a8b8b8b84818110610b1057fe5b9050602002016020810190610b25919061268d565b611dd8565b828281518110610b3657fe5b6020908102919091010152600101610ae9565b50600180559998505050505050505050565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6000546001600160a01b031690565b60026001541415610be7576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001558060005b81811015610c1e57610c078484838181106108a457fe5b610c1684848381811061094257fe5b600101610bf0565b5050600180555050565b6001600160a01b03166000908152600a602052604090205460ff1690565b6001600160a01b031660009081526004602052604090205468010000000000000000900467ffffffffffffffff1690565b60026001541415610ccf576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155610cdc611c09565b60018055565b7f000000000000000000000000000000000000000000000000000000000000000090565b600060026001541415610d60576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556001600160a01b0383166000908152600a6020526040902054839060ff1615610db057336001600160a01b03821614610db05760405162461bcd60e51b815260040161088090612af5565b82610dba8161166c565b610dc2611c09565b610dcb856110ef565b610dd68460006116a4565b610de08585611dd8565b6001805595945050505050565b336000818152600a60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016841515179055517f5df4db5082ff794d02e809cecb2c56f2ac683e734a0b4d1e03fd82b3da056c7191610e56918490612946565b60405180910390a150565b6001600160a01b03919091166000908152600560209081526040808320938352929052205490565b6001600160a01b031660009081526006602052604090205460ff1690565b6001600160a01b03919091166000908152600860209081526040808320938352929052205490565b610ed7611b02565b6001600160a01b0316610ee8610b80565b6001600160a01b031614610f43576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166000908152600660205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831515179055517f359cee3647456cdac70428f1f028ea08d4bafdc5703fc14df9625b49f4398c9d90610fb79084908490612946565b60405180910390a15050565b610fcb611b02565b6001600160a01b0316610fdc610b80565b6001600160a01b031614611037576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661107c5760405162461bcd60e51b8152600401808060200182810382526026815260200180612bb96026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6040517f010ae7570000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063010ae75790611157908590600401612932565b60206040518083038186803b15801561116f57600080fd5b505afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a7919061291a565b9050600081116111c95760405162461bcd60e51b815260040161088090612b2c565b6001600160a01b0382166000908152600760205260408120805490916801000000000000000090910467ffffffffffffffff1690816112365761122f857f0000000000000000000000000000000000000000000000000000000000000000600087611fb4565b9050611289565b4282106112465750505050611669565b50815470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16601481850311156112895761128685838387611fb4565b90505b80611292575060015b6040517f28d09d470000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328d09d47906112fc908990869060040161298a565b60806040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190612897565b9050826113fd577f000000000000000000000000000000000000000000000000000000000000000042116113925760405162461bcd60e51b815260040161088090612a98565b6113c87f00000000000000000000000000000000000000000000000000000000000000006113c383604001516120c4565b6120d4565b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff821617855592505b6114056125f4565b60005b60328110156115d057826040015185101580156114255750868411155b1561152c576001840193508291508684111561146d5760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611527565b6040517f28d09d470000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328d09d47906114d4908b90889060040161298a565b60806040518083038186803b1580156114ec57600080fd5b505afa158015611500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115249190612897565b92505b6115c8565b428510611538576115d0565b6000826040015186039050600081846020015102600f0b8460000151600f0b13611563576000611574565b81846020015102846000015103600f0b5b90508015801561158357508886115b1561159a57611591426120c4565b965050506115d0565b6001600160a01b038a1660009081526008602090815260408083208a84529091529020555062093a80909401935b600101611408565b505083546fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9290920167ffffffffffffffff90811670010000000000000000000000000000000002929092177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000093909216929092021790915550505b50565b6001600160a01b03811660009081526006602052604090205460ff166116695760405162461bcd60e51b815260040161088090612a2a565b6001600160a01b0382166000908152600460205260408120805490916801000000000000000090910467ffffffffffffffff169081611761577f0000000000000000000000000000000000000000000000000000000000000000421161171c5760405162461bcd60e51b815260040161088090612a98565b429150611728426120eb565b83547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff919091161783556117b3565b8142039050836117b3576000611776836120eb565b61177f426120eb565b14905060006201518042611792426120c4565b031090508180156117a1575080155b156117b0575050505050611a70565b50505b82547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000004267ffffffffffffffff16021783556040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038716906370a0823190611838903090600401612932565b60206040518083038186803b15801561185057600080fd5b505afa158015611864573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611888919061291a565b84549091506000906118c190839070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166120f7565b9050806118d2575050505050611a70565b6fffffffffffffffffffffffffffffffff8211156119025760405162461bcd60e51b815260040161088090612a61565b84546fffffffffffffffffffffffffffffffff808416700100000000000000000000000000000000029116178555600061193b856120eb565b6001600160a01b038916600090815260056020526040812091925090815b6014811015611a2b578362093a80019250824210156119c9578615801561197f57508742145b1561199d5760008481526020839052604090208054860190556119c4565b868842038602816119aa57fe5b600086815260208590526040902080549290910490910190555b611a2b565b861580156119d657508783145b156119f4576000848152602083905260409020805486019055611a1b565b86888403860281611a0157fe5b600086815260208590526040902080549290910490910190555b9196508692508291600101611959565b507f9b7f1a85a4c9b4e59e1b6527d9969c50cdfb3a1a467d0c4a51fb0ed8bf07f1308a8589604051611a5f93929190612a09565b60405180910390a150505050505050505b5050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611afc908590612154565b50505050565b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611b86908490612154565b505050565b6001600160a01b0380831660009081526009602090815260408083209385168352929052908120548015611bc0579050610981565b6001600160a01b0380851660009081526007602090815260408083205493871683526004909152902054611c019167ffffffffffffffff90811691166120d4565b949350505050565b6002546000611c17426120eb565b905080821180611c2657504281145b15611c32575050611dd6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611c8d57600080fd5b505af1158015611ca1573d6000803e3d6000fd5b5050505060005b6014811015611dd05781831115611cbe57611dd0565b6000611cc984612205565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d1febfb9836040518263ffffffff1660e01b8152600401611d199190612b9a565b60806040518083038186803b158015611d3157600080fd5b505afa158015611d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d699190612897565b9050600081604001518611611d7f576000611d87565b816040015186035b60208301518351919250820290036000600f82900b13611da8576000611dad565b80600f0b5b600088815260036020526040902055505062093a80909401935050600101611ca8565b50506002555b565b6001600160a01b038116600090815260046020526040812081611dfb8585611b8b565b6002546001600160a01b03871660009081526007602052604081205492935091611e6e91611e4891611e43919068010000000000000000900467ffffffffffffffff166123a9565b6120c4565b8454611e699068010000000000000000900467ffffffffffffffff166120eb565b6123a9565b6001600160a01b038087166000908152600560209081526040808320938b16835260089091528120929350909190805b6014811015611ef257848610611eb357611ef2565b60008681526003602090815260408083205486835281842054928890529220540281611edb57fe5b62093a809790970196049190910190600101611e9e565b506001600160a01b03808a166000908152600960209081526040808320938c168352929052208590558015611fa85785546fffffffffffffffffffffffffffffffff70010000000000000000000000000000000080830482168490038216029116178655611f6a6001600160a01b0389168a83611b06565b7fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de689898388604051611f9f9493929190612961565b60405180910390a15b98975050505050505050565b60008282825b60808110156120b857818310611fcf576120b8565b6040517f28d09d470000000000000000000000000000000000000000000000000000000081526002838501810104906000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328d09d4790612042908d90869060040161298a565b60806040518083038186803b15801561205a57600080fd5b505afa15801561206e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120929190612897565b9050888160400151116120a7578194506120ae565b6001820393505b5050600101611fba565b50909695505050505050565b600061098162093a7f83016120eb565b6000818310156120e4578161097e565b5090919050565b62093a80908190040290565b60008282111561214e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006121a9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123b89092919063ffffffff16565b805190915015611b86578080602001905160208110156121c857600080fd5b5051611b865760405162461bcd60e51b815260040180806020018281038252602a815260200180612c05602a913960400191505060405180910390fd5b6000806000905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561226757600080fd5b505afa15801561227b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229f919061291a565b905060005b60808110156123a0578183106122b9576123a0565b6040517fd1febfb90000000000000000000000000000000000000000000000000000000081526002838501810104906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d1febfb99061232a908590600401612b9a565b60806040518083038186803b15801561234257600080fd5b505afa158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a9190612897565b90508681604001511161238f57819450612396565b6001820393505b50506001016122a4565b50909392505050565b60008183106120e4578161097e565b60606123c784846000856123d1565b90505b9392505050565b6060824710156124125760405162461bcd60e51b8152600401808060200182810382526026815260200180612bdf6026913960400191505060405180910390fd5b61241b8561254a565b61246c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106124c857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161248b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461252a576040519150601f19603f3d011682016040523d82523d6000602084013e61252f565b606091505b509150915061253f828286612550565b979650505050505050565b3b151590565b6060831561255f5750816123ca565b82511561256f5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125b95781810151838201526020016125a1565b50505050905090810190601f1680156125e65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405180608001604052806000600f0b81526020016000600f0b815260200160008152602001600081525090565b60008083601f840112612633578182fd5b50813567ffffffffffffffff81111561264a578182fd5b602083019150836020808302850101111561266457600080fd5b9250929050565b8035801515811461044b57600080fd5b8051600f81900b811461044b57600080fd5b60006020828403121561269e578081fd5b81356123ca81612ba3565b6000806000604084860312156126bd578182fd5b83356126c881612ba3565b9250602084013567ffffffffffffffff8111156126e3578283fd5b6126ef86828701612622565b9497909650939450505050565b6000806040838503121561270e578182fd5b823561271981612ba3565b9150602083013561272981612ba3565b809150509250929050565b60008060408385031215612746578182fd5b823561275181612ba3565b946020939093013593505050565b60008060208385031215612771578182fd5b823567ffffffffffffffff811115612787578283fd5b61279385828601612622565b90969095509350505050565b600080600080604085870312156127b4578081fd5b843567ffffffffffffffff808211156127cb578283fd5b6127d788838901612622565b909650945060208701359150808211156127ef578283fd5b506127fc87828801612622565b95989497509550505050565b600060208284031215612819578081fd5b61097e8261266b565b60008060408385031215612834578182fd5b823561283f81612ba3565b915061284d6020840161266b565b90509250929050565b60008060006060848603121561286a578283fd5b833561287581612ba3565b925060208401359150604084013561288c81612ba3565b809150509250925092565b6000608082840312156128a8578081fd5b6040516080810181811067ffffffffffffffff821117156128c557fe5b6040526128d18361267b565b81526128df6020840161267b565b602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215612913578081fd5b5035919050565b60006020828403121561292b578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156120b8578351835292840192918401916001016129bf565b901515815260200190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b60208082526014908201527f546f6b656e206973206e6f7420616c6c6f776564000000000000000000000000604082015260600190565b6020808252601e908201527f4d6178696d756d20746f6b656e2062616c616e63652065786365656465640000604082015260600190565b60208082526024908201527f46656520646973747269627574696f6e20686173206e6f74207374617274656460408201527f2079657400000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f436c61696d696e67206973206e6f7420616c6c6f776564000000000000000000604082015260600190565b60208082526015908201527f76655354472062616c616e6365206973207a65726f0000000000000000000000604082015260600190565b60208082526015908201527f496e707574206c656e677468206d69736d617463680000000000000000000000604082015260600190565b90815260200190565b6001600160a01b038116811461166957600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220ed016ceb092c9550649e4c44527b0d19d8e48c83a3744d0b7901b08f3419abb364736f6c63430007060033",
  "devdoc": {
    "author": "Balancer Labs. Original version https://github.com/balancer/balancer-v2-monorepo/blob/master/pkg/liquidity-mining/contracts/fee-distribution/FeeDistributor.sol",
    "details": "Supports distributing arbitrarily many different tokens. In order to start distributing a new token to veSTG holders call `depositToken`.",
    "kind": "dev",
    "methods": {
      "canTokenBeClaimed(address)": {
        "params": {
          "token": "- The ERC20 token address to query."
        }
      },
      "checkpointToken(address)": {
        "details": "Any `token` balance held by the FeeDistributor above that which is returned by `getTokenLastBalance` will be distributed evenly across the time period since `token` was last checkpointed. This function will be called automatically before claiming tokens to ensure the contract is properly updated.",
        "params": {
          "token": "- The ERC20 token address to be checkpointed."
        }
      },
      "checkpointTokens(address[])": {
        "details": "A version of `checkpointToken` which supports checkpointing multiple tokens. See `checkpointToken` for more details.",
        "params": {
          "tokens": "- An array of ERC20 token addresses to be checkpointed."
        }
      },
      "checkpointUser(address)": {
        "params": {
          "user": "- The address of the user to be checkpointed."
        }
      },
      "claimToken(address,address)": {
        "details": "It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor is up to date before calculating the amount of tokens to be claimed.",
        "params": {
          "token": "- The ERC20 token address to be claimed.",
          "user": "- The user on behalf of which to claim."
        },
        "returns": {
          "_0": "The amount of `token` sent to `user` as a result of claiming."
        }
      },
      "claimTokens(address,address[])": {
        "details": "A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`. See `claimToken` for more details.",
        "params": {
          "tokens": "- An array of ERC20 token addresses to be claimed.",
          "user": "- The user on behalf of which to claim."
        },
        "returns": {
          "_0": "An array of the amounts of each token in `tokens` sent to `user` as a result of claiming."
        }
      },
      "depositToken(address,uint256)": {
        "details": "Sending tokens directly to the FeeDistributor instead of using `depositToken` may result in tokens being retroactively distributed to past weeks, or for the distribution to carry over to future weeks. If for some reason `depositToken` cannot be called, in order to ensure that all tokens are correctly distributed manually call `checkpointToken` before and after the token transfer.",
        "params": {
          "amount": "- The amount of tokens to deposit.",
          "token": "- The ERC20 token address to distribute."
        }
      },
      "depositTokens(address[],uint256[])": {
        "details": "A version of `depositToken` which supports depositing multiple `tokens` at once. See `depositToken` for more details.",
        "params": {
          "amounts": "- An array of token amounts to deposit.",
          "tokens": "- An array of ERC20 token addresses to distribute."
        }
      },
      "enableOnlyVeHolderClaiming(bool)": {
        "params": {
          "enabled": "- True if only the VotingEscrow holder can claim their rewards, false otherwise."
        }
      },
      "enableTokenClaiming(address,bool)": {
        "params": {
          "enable": "- True if the token can be claimed, false otherwise.",
          "token": "- The token to enable or disable claiming."
        }
      },
      "getTokenCachedBalance(address)": {
        "params": {
          "token": "- The ERC20 token address to query."
        }
      },
      "getTokenStartTime(address)": {
        "params": {
          "token": "- The ERC20 token address to query."
        }
      },
      "getTokenTimeCursor(address)": {
        "params": {
          "token": "- The ERC20 token address to query."
        }
      },
      "getTokensDistributedInWeek(address,uint256)": {
        "params": {
          "timestamp": "- The timestamp corresponding to the beginning of the week of interest.",
          "token": "- The ERC20 token address to query."
        }
      },
      "getTotalSupplyAtTimestamp(uint256)": {
        "details": "Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values. This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.",
        "params": {
          "timestamp": "- The timestamp at which to read the cached total supply at."
        }
      },
      "getUserBalanceAtTimestamp(address,uint256)": {
        "details": "Only timestamps which fall on Thursdays 00:00:00 UTC will return correct values. This function requires `user` to have been checkpointed past `timestamp` so that their balance is cached.",
        "params": {
          "timestamp": "- The timestamp at which to read the `user`'s cached balance at.",
          "user": "- The address of the user of which to read the cached balance of."
        }
      },
      "getUserLastEpochCheckpointed(address)": {
        "params": {
          "user": "- The address of the user to query."
        }
      },
      "getUserStartTime(address)": {
        "params": {
          "user": "- The address of the user to query."
        }
      },
      "getUserTimeCursor(address)": {
        "params": {
          "user": "- The address of the user to query."
        }
      },
      "getUserTokenTimeCursor(address,address)": {
        "params": {
          "token": "- The ERC20 token address to query.",
          "user": "- The address of the user to query."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawToken(address,uint256,address)": {
        "params": {
          "amount": "- The amount to withdraw.",
          "recipient": "- The address to transfer the tokens to.",
          "token": "- The token to withdraw."
        }
      }
    },
    "title": "Fee Distributor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canTokenBeClaimed(address)": {
        "notice": "True if the given token can be claimed, false otherwise."
      },
      "checkpoint()": {
        "notice": "Caches the total supply of veSTG at the beginning of each week. This function will be called automatically before claiming tokens to ensure the contract is properly updated."
      },
      "checkpointToken(address)": {
        "notice": "Assigns any newly-received tokens held by the FeeDistributor to weekly distributions."
      },
      "checkpointTokens(address[])": {
        "notice": "Assigns any newly-received tokens held by the FeeDistributor to weekly distributions."
      },
      "checkpointUser(address)": {
        "notice": "Caches the user's balance of veSTG at the beginning of each week. This function will be called automatically before claiming tokens to ensure the contract is properly updated."
      },
      "claimToken(address,address)": {
        "notice": "Claims all pending distributions of the provided token for a user."
      },
      "claimTokens(address,address[])": {
        "notice": "Claims a number of tokens on behalf of a user."
      },
      "depositToken(address,uint256)": {
        "notice": "Deposits tokens to be distributed in the current week."
      },
      "depositTokens(address[],uint256[])": {
        "notice": "Deposits tokens to be distributed in the current week."
      },
      "enableOnlyVeHolderClaiming(bool)": {
        "notice": "Enables / disables rewards claiming only by the VotingEscrow holder for the message sender."
      },
      "enableTokenClaiming(address,bool)": {
        "notice": "Enables or disables claiming of the given token. Can be called only by Stargate DAO."
      },
      "getStartTime()": {
        "notice": "Returns the time when fee distribution starts."
      },
      "getTimeCursor()": {
        "notice": "Returns the global time cursor representing the most earliest uncheckpointed week."
      },
      "getTokenCachedBalance(address)": {
        "notice": "Returns the token-level cached balance."
      },
      "getTokenLastBalance(address)": {
        "notice": "Returns the FeeDistributor's cached balance of `token`."
      },
      "getTokenStartTime(address)": {
        "notice": "Returns the token-level start time representing the timestamp users could start claiming this token"
      },
      "getTokenTimeCursor(address)": {
        "notice": "Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed."
      },
      "getTokensDistributedInWeek(address,uint256)": {
        "notice": "Returns the amount of `token` which the FeeDistributor received in the week beginning at `timestamp`."
      },
      "getTotalSupplyAtTimestamp(uint256)": {
        "notice": "Returns the cached total supply of veSTG as of the provided timestamp."
      },
      "getUserBalanceAtTimestamp(address,uint256)": {
        "notice": "Returns the user's cached balance of veSTG as of the provided timestamp."
      },
      "getUserLastEpochCheckpointed(address)": {
        "notice": "Returns the user-level last checkpointed epoch."
      },
      "getUserStartTime(address)": {
        "notice": "Returns the user-level start time representing the first week they're eligible to claim tokens."
      },
      "getUserTimeCursor(address)": {
        "notice": "Returns the user-level time cursor representing the most earliest uncheckpointed week."
      },
      "getUserTokenTimeCursor(address,address)": {
        "notice": "Returns the user-level time cursor storing the timestamp of the latest token distribution claimed."
      },
      "getVotingEscrow()": {
        "notice": "Returns the VotingEscrow (veSTG) token contract"
      },
      "onlyVeHolderClaimingEnabled(address)": {
        "notice": "Returns true if only the VotingEscrow holder can claim their rewards, false otherwise."
      },
      "withdrawToken(address,uint256,address)": {
        "notice": "Withdraws the specified `amount` of the `token` from the contract to the `recipient`. Can be called only by Stargate DAO."
      }
    },
    "notice": "Distributes any tokens transferred to the contract (e.g. Protocol fees) among veSTG holders proportionally based on a snapshot of the week at which the tokens are sent to the FeeDistributor contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1158,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1222,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_timeCursor",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1226,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_veSupplyCache",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1237,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_tokenState",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20)615,t_struct(TokenState)1233_storage)"
      },
      {
        "astId": 1243,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_tokensPerWeek",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_contract(IERC20)615,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1247,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_tokenClaimingEnabled",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_contract(IERC20)615,t_bool)"
      },
      {
        "astId": 1258,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_userState",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserState)1254_storage)"
      },
      {
        "astId": 1264,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_userBalanceAtTimestamp",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1270,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_userTokenTimeCursor",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)615,t_uint256))"
      },
      {
        "astId": 1274,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_onlyVeHolderClaimingEnabled",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)615": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)615,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)615,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserState)1254_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FeeDistributor.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)1254_storage"
      },
      "t_mapping(t_contract(IERC20)615,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)615",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)615,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)615",
        "label": "mapping(contract IERC20 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)615,t_struct(TokenState)1233_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)615",
        "label": "mapping(contract IERC20 => struct FeeDistributor.TokenState)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenState)1233_storage"
      },
      "t_mapping(t_contract(IERC20)615,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)615",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TokenState)1233_storage": {
        "encoding": "inplace",
        "label": "struct FeeDistributor.TokenState",
        "members": [
          {
            "astId": 1228,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1230,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "timeCursor",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1232,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "cachedBalance",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UserState)1254_storage": {
        "encoding": "inplace",
        "label": "struct FeeDistributor.UserState",
        "members": [
          {
            "astId": 1249,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1251,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "timeCursor",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1253,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "lastEpochCheckpointed",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}