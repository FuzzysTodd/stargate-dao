{
  "address": "0x9485DbDa44B279311e3eEe374CED60b5364A97d9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum sVotingEscrow.DepositType",
          "name": "deposit_type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAtT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "create_lock_for",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "get_last_user_slope",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increase_amount_for",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "increase_unlock_time_for",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int128",
          "name": "amount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "locked__end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "point_history",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slope_changes",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAtT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_point_epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "user_point_history",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "user_point_history__ts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "withdraw_for",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55d4e07fcf1e252f4289b9ffd9b11df676547f20f109974445a66b3eb215c127",
  "receipt": {
    "to": null,
    "from": "0x1D7C6783328C145393e84fb47a7f7C548f5Ee28d",
    "contractAddress": "0x9485DbDa44B279311e3eEe374CED60b5364A97d9",
    "transactionIndex": 14,
    "gasUsed": "2384149",
    "logsBloom": "0x
    "blockHash": "0x95cddee184129bb894bbaa778efa559ba6f60bdf4b822a28fa0a43e1d64e215b",
    "transactionHash": "0x55d4e07fcf1e252f4289b9ffd9b11df676547f20f109974445a66b3eb215c127",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 14624953,
        "transactionHash": "0x55d4e07fcf1e252f4289b9ffd9b11df676547f20f109974445a66b3eb215c127",
        "address": "0x9485DbDa44B279311e3eEe374CED60b5364A97d9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001d7c6783328c145393e84fb47a7f7c548f5ee28d"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x95cddee184129bb894bbaa778efa559ba6f60bdf4b822a28fa0a43e1d64e215b"
      }
    ],
    "blockNumber": 14624953,
    "cumulativeGasUsed": "3243534",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "820d81c0a9867d8302a65c3783f3d5fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum sVotingEscrow.DepositType\",\"name\":\"deposit_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOfAtT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"create_lock_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_last_user_slope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increase_amount_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"increase_unlock_time_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"locked__end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"point_history\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slope_changes\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_point_history\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"user_point_history__ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOfAt(address,uint256)\":{\"details\":\"Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\",\"params\":{\"_block\":\"Block to calculate the voting power at\",\"addr\":\"User's wallet address\"},\"returns\":{\"_0\":\"Voting power\"}},\"create_lock_for(address,uint256,uint256)\":{\"params\":{\"_addr\":\"Create lock for address\",\"_unlock_time\":\"Epoch time when tokens unlock, rounded down to whole weeks\",\"_value\":\"Amount to deposit\"}},\"get_last_user_slope(address)\":{\"params\":{\"addr\":\"Address of the user wallet\"},\"returns\":{\"_0\":\"Value of the slope\"}},\"increase_amount_for(address,uint256)\":{\"params\":{\"_addr\":\"Increase amount for address\",\"_value\":\"Amount of tokens to deposit and add to the lock\"}},\"increase_unlock_time_for(address,uint256)\":{\"params\":{\"_addr\":\"Increase unlock time for address\",\"_unlock_time\":\"New epoch time for unlocking\"}},\"locked__end(address)\":{\"params\":{\"_addr\":\"User wallet address\"},\"returns\":{\"_0\":\"Epoch time of the lock end\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupplyAt(uint256)\":{\"params\":{\"_block\":\"Block to calculate the total voting power at\"},\"returns\":{\"_0\":\"Total voting power at `_block`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"user_point_history__ts(address,uint256)\":{\"params\":{\"_addr\":\"User wallet address\",\"_idx\":\"User epoch number\"},\"returns\":{\"_0\":\"Epoch time of the checkpoint\"}},\"withdraw_for(address)\":{\"details\":\"Only possible if the lock has expired\",\"params\":{\"_addr\":\"Withdraw for address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOfAt(address,uint256)\":{\"notice\":\"Measure voting power of `addr` at block height `_block`\"},\"checkpoint()\":{\"notice\":\"Record global data to checkpoint\"},\"constructor\":{\"notice\":\"Contract constructor\"},\"create_lock_for(address,uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `_addr` and lock until `_unlock_time`\"},\"get_last_user_slope(address)\":{\"notice\":\"Get the most recently recorded rate of voting power decrease for `_addr`\"},\"increase_amount_for(address,uint256)\":{\"notice\":\"Deposit `_value` additional tokens for `_addr` without modifying the unlock time\"},\"increase_unlock_time_for(address,uint256)\":{\"notice\":\"Extend the unlock time for `_addr` to `_unlock_time`\"},\"locked__end(address)\":{\"notice\":\"Get timestamp when `_addr`'s lock finishes\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Calculate total voting power at some point in the past\"},\"user_point_history__ts(address,uint256)\":{\"notice\":\"Get the timestamp for checkpoint `_idx` for `_addr`\"},\"withdraw_for(address)\":{\"notice\":\"Withdraw all tokens for `_addr`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sVotingEscrow.sol\":\"sVotingEscrow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/sVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n@title Voting Escrow\\n@author Curve Finance\\n@license MIT\\n@notice Votes have a weight depending on time, so that users are\\n        committed to the future of (whatever they are voting for)\\n@dev Vote weight decays linearly over time. Lock time cannot be\\n     more than `MAXTIME` (3 years).\\n\\n# Voting escrow to have time-weighted votes\\n# Votes have a weight depending on time, so that users are committed\\n# to the future of (whatever they are voting for).\\n# The weight in this implementation is linear, and lock cannot be more than maxtime:\\n# w ^\\n# 1 +        /\\n#   |      /\\n#   |    /\\n#   |  /\\n#   |/\\n# 0 +--------+------> time\\n#       maxtime (3 years?)\\n*/\\nstruct Point {\\n    int128 bias;\\n    int128 slope; // # -dweight / dt\\n    uint ts;\\n    uint blk; // block\\n}\\n\\nstruct LockedBalance {\\n    int128 amount;\\n    uint end;\\n}\\n\\ncontract sVotingEscrow is Ownable, ReentrancyGuard {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME\\n    }\\n\\n    event Deposit(address indexed provider, uint value, uint indexed locktime, DepositType deposit_type, uint ts);\\n    event Withdraw(address indexed provider, uint value, uint ts);\\n\\n    uint internal constant WEEK = 1 weeks;\\n    uint public constant MAXTIME = 3 * 365 * 86400;\\n    int128 internal constant iMAXTIME = 3 * 365 * 86400;\\n    uint internal constant MULTIPLIER = 1 ether;\\n\\n    mapping(address => LockedBalance) public locked;\\n\\n    uint public epoch;\\n    mapping(uint => Point) public point_history; // epoch -> unsigned point\\n    mapping(address => Point[1000000000]) public user_point_history; // user -> Point[user_epoch]\\n    mapping(address => uint) public user_point_epoch;\\n    mapping(uint => int128) public slope_changes; // time -> signed slope change\\n\\n    string public constant name = \\\"sveSTG\\\";\\n    string public constant symbol = \\\"sveSTG\\\";\\n    string public constant version = \\\"1.0.0\\\";\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Contract constructor\\n    constructor() {\\n        point_history[0].blk = block.number;\\n        point_history[0].ts = block.timestamp;\\n    }\\n\\n    /// @notice Get the most recently recorded rate of voting power decrease for `_addr`\\n    /// @param addr Address of the user wallet\\n    /// @return Value of the slope\\n    function get_last_user_slope(address addr) external view returns (int128) {\\n        uint uepoch = user_point_epoch[addr];\\n        return user_point_history[addr][uepoch].slope;\\n    }\\n\\n    /// @notice Get the timestamp for checkpoint `_idx` for `_addr`\\n    /// @param _addr User wallet address\\n    /// @param _idx User epoch number\\n    /// @return Epoch time of the checkpoint\\n    function user_point_history__ts(address _addr, uint _idx) external view returns (uint) {\\n        return user_point_history[_addr][_idx].ts;\\n    }\\n\\n    /// @notice Get timestamp when `_addr`'s lock finishes\\n    /// @param _addr User wallet address\\n    /// @return Epoch time of the lock end\\n    function locked__end(address _addr) external view returns (uint) {\\n        return locked[_addr].end;\\n    }\\n\\n    /// @notice Record global and per-user data to checkpoint\\n    /// @param _addr User's wallet address. No user checkpoint if 0x0\\n    /// @param old_locked Pevious locked amount / end lock time for the user\\n    /// @param new_locked New locked amount / end lock time for the user\\n    function _checkpoint(address _addr, LockedBalance memory old_locked, LockedBalance memory new_locked) internal {\\n        Point memory u_old;\\n        Point memory u_new;\\n        int128 old_dslope = 0;\\n        int128 new_dslope = 0;\\n        uint _epoch = epoch;\\n\\n        if (_addr != address(0x0)) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (old_locked.end > block.timestamp && old_locked.amount > 0) {\\n                u_old.slope = old_locked.amount / iMAXTIME;\\n                u_old.bias = u_old.slope * int128(int(old_locked.end - block.timestamp));\\n            }\\n            if (new_locked.end > block.timestamp && new_locked.amount > 0) {\\n                u_new.slope = new_locked.amount / iMAXTIME;\\n                u_new.bias = u_new.slope * int128(int(new_locked.end - block.timestamp));\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // old_locked.end can be in the past and in the future\\n            // new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            old_dslope = slope_changes[old_locked.end];\\n            if (new_locked.end != 0) {\\n                if (new_locked.end == old_locked.end) {\\n                    new_dslope = old_dslope;\\n                } else {\\n                    new_dslope = slope_changes[new_locked.end];\\n                }\\n            }\\n        }\\n\\n        Point memory last_point = Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\\n        if (_epoch > 0) {\\n            last_point = point_history[_epoch];\\n        }\\n        uint last_checkpoint = last_point.ts;\\n        // initial_last_point is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n\\n        uint initial_last_point_ts = last_point.ts;\\n        uint initial_last_point_blk = last_point.blk;\\n\\n        uint block_slope = 0; // dblock/dt\\n        if (block.timestamp > last_point.ts) {\\n            block_slope = (MULTIPLIER * (block.number - last_point.blk)) / (block.timestamp - last_point.ts);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint t_i = (last_checkpoint / WEEK) * WEEK;\\n        for (uint i = 0; i < 255; ++i) {\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            t_i += WEEK;\\n            int128 d_slope = 0;\\n            if (t_i > block.timestamp) {\\n                t_i = block.timestamp;\\n            } else {\\n                d_slope = slope_changes[t_i];\\n            }\\n            last_point.bias -= last_point.slope * int128(int(t_i - last_checkpoint));\\n            last_point.slope += d_slope;\\n            if (last_point.bias < 0) {\\n                // This can happen\\n                last_point.bias = 0;\\n            }\\n            if (last_point.slope < 0) {\\n                // This cannot happen - just in case\\n                last_point.slope = 0;\\n            }\\n            last_checkpoint = t_i;\\n            last_point.ts = t_i;\\n            last_point.blk = initial_last_point_blk + (block_slope * (t_i - initial_last_point_ts)) / MULTIPLIER;\\n\\n            _epoch += 1;\\n            if (t_i == block.timestamp) {\\n                last_point.blk = block.number;\\n                break;\\n            } else {\\n                point_history[_epoch] = last_point;\\n            }\\n        }\\n\\n        epoch = _epoch;\\n        // Now point_history is filled until t=now\\n\\n        if (_addr != address(0x0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            last_point.slope += (u_new.slope - u_old.slope);\\n            last_point.bias += (u_new.bias - u_old.bias);\\n            if (last_point.slope < 0) {\\n                last_point.slope = 0;\\n            }\\n            if (last_point.bias < 0) {\\n                last_point.bias = 0;\\n            }\\n        }\\n\\n        // Record the changed point into history\\n        point_history[_epoch] = last_point;\\n\\n        if (_addr != address(0x0)) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [new_locked.end]\\n            // and add old_user_slope to [old_locked.end]\\n            if (old_locked.end > block.timestamp) {\\n                // old_dslope was <something> - u_old.slope, so we cancel that\\n                old_dslope += u_old.slope;\\n                if (new_locked.end == old_locked.end) {\\n                    old_dslope -= u_new.slope; // It was a new deposit, not extension\\n                }\\n                slope_changes[old_locked.end] = old_dslope;\\n            }\\n\\n            if (new_locked.end > block.timestamp) {\\n                if (new_locked.end > old_locked.end) {\\n                    new_dslope -= u_new.slope; // old slope disappeared at this point\\n                    slope_changes[new_locked.end] = new_dslope;\\n                }\\n                // else: we recorded it already in old_dslope\\n            }\\n            // Now handle user history\\n            address addr = _addr;\\n            uint user_epoch = user_point_epoch[addr] + 1;\\n\\n            user_point_epoch[addr] = user_epoch;\\n            u_new.ts = block.timestamp;\\n            u_new.blk = block.number;\\n            user_point_history[addr][user_epoch] = u_new;\\n        }\\n    }\\n\\n    /// @notice Deposit and lock tokens for a user\\n    /// @param _addr User's wallet address\\n    /// @param _value Amount to deposit\\n    /// @param unlock_time New time when to unlock the tokens, or 0 if unchanged\\n    /// @param locked_balance Previous locked amount / timestamp\\n    /// @param deposit_type The type of deposit\\n    function _deposit_for(address _addr, uint _value, uint unlock_time, LockedBalance memory locked_balance, DepositType deposit_type) internal {\\n        LockedBalance memory _locked = locked_balance;\\n\\n        LockedBalance memory old_locked;\\n        (old_locked.amount, old_locked.end) = (_locked.amount, _locked.end);\\n        // Adding to existing lock, or if a lock is expired - creating a new one\\n        _locked.amount += int128(int(_value));\\n        if (unlock_time != 0) {\\n            _locked.end = unlock_time;\\n        }\\n        locked[_addr] = _locked;\\n\\n        // Possibilities:\\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n        _checkpoint(_addr, old_locked, _locked);\\n\\n        emit Deposit(_addr, _value, _locked.end, deposit_type, block.timestamp);\\n    }\\n\\n    /// @notice Record global data to checkpoint\\n    function checkpoint() external {\\n        _checkpoint(address(0x0), LockedBalance(0, 0), LockedBalance(0, 0));\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `_addr` and lock until `_unlock_time`\\n    /// @param _addr Create lock for address\\n    /// @param _value Amount to deposit\\n    /// @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n    function create_lock_for(address _addr, uint _value, uint _unlock_time) external nonReentrant onlyOwner {\\n        require(_value > 0); // dev: need non-zero value\\n\\n        LockedBalance memory _locked = locked[_addr];\\n        require(_locked.amount == 0, \\\"Withdraw old tokens first\\\");\\n\\n        uint unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n        require(unlock_time > block.timestamp, \\\"Can only lock until time in the future\\\");\\n        require(unlock_time <= block.timestamp + MAXTIME, \\\"Voting lock can be 3 years max\\\");\\n\\n        _deposit_for(_addr, _value, unlock_time, _locked, DepositType.CREATE_LOCK_TYPE);\\n    }\\n\\n    /// @notice Deposit `_value` additional tokens for `_addr` without modifying the unlock time\\n    /// @param _addr Increase amount for address\\n    /// @param _value Amount of tokens to deposit and add to the lock\\n    function increase_amount_for(address _addr, uint _value) external nonReentrant onlyOwner {\\n        LockedBalance memory _locked = locked[_addr];\\n\\n        require(_value > 0); // dev: need non-zero value\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"Cannot add to expired lock. Withdraw\\\");\\n\\n        _deposit_for(_addr, _value, 0, _locked, DepositType.INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    /// @notice Extend the unlock time for `_addr` to `_unlock_time`\\n    /// @param _addr Increase unlock time for address\\n    /// @param _unlock_time New epoch time for unlocking\\n    function increase_unlock_time_for(address _addr, uint _unlock_time) external nonReentrant onlyOwner {\\n        LockedBalance memory _locked = locked[_addr];\\n        uint unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n\\n        require(_locked.end > block.timestamp, \\\"Lock expired\\\");\\n        require(_locked.amount > 0, \\\"Nothing is locked\\\");\\n        require(unlock_time > _locked.end, \\\"Can only increase lock duration\\\");\\n        require(unlock_time <= block.timestamp + MAXTIME, \\\"Voting lock can be 3 years max\\\");\\n\\n        _deposit_for(_addr, 0, unlock_time, _locked, DepositType.INCREASE_UNLOCK_TIME);\\n    }\\n\\n    /// @notice Withdraw all tokens for `_addr`\\n    /// @dev Only possible if the lock has expired\\n    /// @param _addr Withdraw for address\\n    function withdraw_for(address _addr) external nonReentrant onlyOwner {\\n        LockedBalance memory _locked = locked[_addr];\\n        uint value = uint(int(_locked.amount));\\n\\n        locked[_addr] = LockedBalance(0, 0);\\n\\n        // old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(_addr, _locked, LockedBalance(0, 0));\\n\\n        emit Withdraw(_addr, value, block.timestamp);\\n    }\\n\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    // They measure the weights for the purpose of voting, so they don't represent\\n    // real coins.\\n\\n    /// @notice Binary search to estimate timestamp for block number\\n    /// @param _block Block to find\\n    /// @param max_epoch Don't go beyond this epoch\\n    /// @return Approximate timestamp for block\\n    function _find_block_epoch(uint _block, uint max_epoch) internal view returns (uint) {\\n        // Binary search\\n        uint _min = 0;\\n        uint _max = max_epoch;\\n        for (uint i = 0; i < 128; ++i) {\\n            // Will be always enough for 128-bit numbers\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint _mid = (_min + _max + 1) / 2;\\n            if (point_history[_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /// @notice Get the current voting power for `_addr`\\n    /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n    /// @param addr User wallet address\\n    /// @param _t Epoch time to return voting power at\\n    /// @return User voting power\\n    function _balanceOf(address addr, uint _t) internal view returns (uint) {\\n        uint _epoch = user_point_epoch[addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory last_point = user_point_history[addr][_epoch];\\n            last_point.bias -= last_point.slope * int128(int(_t) - int(last_point.ts));\\n            if (last_point.bias < 0) {\\n                last_point.bias = 0;\\n            }\\n            return uint(int(last_point.bias));\\n        }\\n    }\\n\\n    function balanceOfAtT(address addr, uint _t) external view returns (uint) {\\n        return _balanceOf(addr, _t);\\n    }\\n\\n    function balanceOf(address addr) external view returns (uint) {\\n        return _balanceOf(addr, block.timestamp);\\n    }\\n\\n    /// @notice Measure voting power of `addr` at block height `_block`\\n    /// @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n    /// @param addr User's wallet address\\n    /// @param _block Block to calculate the voting power at\\n    /// @return Voting power\\n    function balanceOfAt(address addr, uint _block) external view returns (uint) {\\n        // Copying and pasting totalSupply code because Vyper cannot pass by\\n        // reference yet\\n        require(_block <= block.number);\\n\\n        // Binary search\\n        uint _min = 0;\\n        uint _max = user_point_epoch[addr];\\n        for (uint i = 0; i < 128; ++i) {\\n            // Will be always enough for 128-bit numbers\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint _mid = (_min + _max + 1) / 2;\\n            if (user_point_history[addr][_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n\\n        Point memory upoint = user_point_history[addr][_min];\\n\\n        uint max_epoch = epoch;\\n        uint _epoch = _find_block_epoch(_block, max_epoch);\\n        Point memory point_0 = point_history[_epoch];\\n        uint d_block = 0;\\n        uint d_t = 0;\\n        if (_epoch < max_epoch) {\\n            Point memory point_1 = point_history[_epoch + 1];\\n            d_block = point_1.blk - point_0.blk;\\n            d_t = point_1.ts - point_0.ts;\\n        } else {\\n            d_block = block.number - point_0.blk;\\n            d_t = block.timestamp - point_0.ts;\\n        }\\n        uint block_time = point_0.ts;\\n        if (d_block != 0) {\\n            block_time += (d_t * (_block - point_0.blk)) / d_block;\\n        }\\n\\n        upoint.bias -= upoint.slope * int128(int(block_time - upoint.ts));\\n        if (upoint.bias >= 0) {\\n            return uint(uint128(upoint.bias));\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param point The point (bias/slope) to start search from\\n    /// @param t Time to calculate the total voting power at\\n    /// @return Total voting power at that time\\n    function _supply_at(Point memory point, uint t) internal view returns (uint) {\\n        Point memory last_point = point;\\n        uint t_i = (last_point.ts / WEEK) * WEEK;\\n        for (uint i = 0; i < 255; ++i) {\\n            t_i += WEEK;\\n            int128 d_slope = 0;\\n            if (t_i > t) {\\n                t_i = t;\\n            } else {\\n                d_slope = slope_changes[t_i];\\n            }\\n            last_point.bias -= last_point.slope * int128(int(t_i - last_point.ts));\\n            if (t_i == t) {\\n                break;\\n            }\\n            last_point.slope += d_slope;\\n            last_point.ts = t_i;\\n        }\\n\\n        if (last_point.bias < 0) {\\n            last_point.bias = 0;\\n        }\\n        return uint(uint128(last_point.bias));\\n    }\\n\\n    /// @notice Calculate total voting power\\n    /// @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n    /// @return Total voting power\\n    function _totalSupply(uint t) internal view returns (uint) {\\n        uint _epoch = epoch;\\n        Point memory last_point = point_history[_epoch];\\n        return _supply_at(last_point, t);\\n    }\\n\\n    function totalSupplyAtT(uint t) external view returns (uint) {\\n        return _totalSupply(t);\\n    }\\n\\n    function totalSupply() external view returns (uint) {\\n        return _totalSupply(block.timestamp);\\n    }\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param _block Block to calculate the total voting power at\\n    /// @return Total voting power at `_block`\\n    function totalSupplyAt(uint _block) external view returns (uint) {\\n        require(_block <= block.number);\\n        uint _epoch = epoch;\\n        uint target_epoch = _find_block_epoch(_block, _epoch);\\n\\n        Point memory point = point_history[target_epoch];\\n        uint dt = 0;\\n        if (target_epoch < _epoch) {\\n            Point memory point_next = point_history[target_epoch + 1];\\n            if (point.blk != point_next.blk) {\\n                dt = ((_block - point.blk) * (point_next.ts - point.ts)) / (point_next.blk - point.blk);\\n            }\\n        } else {\\n            if (point.blk != block.number) {\\n                dt = ((_block - point.blk) * (block.timestamp - point.ts)) / (block.number - point.blk);\\n            }\\n        }\\n        // Now dt contains info on how far are we beyond point\\n        return _supply_at(point, point.ts + dt);\\n    }\\n}\\n\",\"keccak256\":\"0x65a1c0e2f3cdc998dc1867f330cf68015dac1847ef348467bdcbc5b8a287c614\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610072565b60018055600080526004602052437f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ee55427f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ed556100c2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6128a7806100d16000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637c74a174116100f9578063cbf9fe5f11610097578063da020a1811610071578063da020a18146104ce578063e8648376146104e1578063ee00ef3a146104f4578063f2fde38b146104ff57600080fd5b8063cbf9fe5f14610428578063d07b705f14610470578063d1febfb91461048357600080fd5b806395d89b41116100d357806395d89b41146101fc578063981b24d0146103d4578063adc63589146103e7578063c2c4c5c11461042057600080fd5b80637c74a174146103905780638da5cb5b146103a3578063900cf0cf146103cb57600080fd5b80634c3b67b41161016657806370a082311161014057806370a082311461032c5780637116c60c1461033f5780637119748414610352578063715018a61461038857600080fd5b80634c3b67b4146102ca5780634ee2cd7e146102dd57806354fd4d50146102f057600080fd5b806318160ddd116101a257806318160ddd1461025a57806328d09d4714610262578063313ce5671461029d5780633e173b29146102b757600080fd5b8063010ae757146101c957806306fdde03146101fc578063116b604514610245575b600080fd5b6101e96101d7366004612394565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b6102386040518060400160405280600681526020017f737665535447000000000000000000000000000000000000000000000000000081525081565b6040516101f39190612421565b6102586102533660046123ae565b610512565b005b6101e96107ac565b6102756102703660046123ae565b6107bc565b60408051600f95860b81529390940b60208401529282015260608101919091526080016101f3565b6102a5601281565b60405160ff90911681526020016101f3565b6102586102c53660046123d7565b610810565b6102586102d8366004612394565b610a7e565b6101e96102eb3660046123ae565b610c5d565b6102386040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6101e961033a366004612394565b611011565b6101e961034d366004612409565b61101d565b610375610360366004612409565b600760205260009081526040902054600f0b81565b604051600f9190910b81526020016101f3565b610258611028565b61037561039e366004612394565b61109b565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f3565b6101e960035481565b6101e96103e2366004612409565b611129565b6101e96103f5366004612394565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090206001015490565b6102586112f2565b610456610436366004612394565b60026020526000908152604090208054600190910154600f9190910b9082565b60408051600f9390930b83526020830191909152016101f3565b6101e961047e3660046123ae565b611330565b610275610491366004612409565b600460205260009081526040902080546001820154600290920154600f82810b93700100000000000000000000000000000000909304900b919084565b6101e96104dc3660046123ae565b611343565b6102586104ef3660046123ae565b6113b3565b6101e96305a39a8081565b61025861050d366004612394565b6115a9565b6002600154141561056a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015560005473ffffffffffffffffffffffffffffffffffffffff1633146105d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832081518083019092528054600f90810b810b900b825260010154918101919091529062093a8061062d81856125dc565b61063791906126a2565b90504282602001511161068c5760405162461bcd60e51b815260206004820152600c60248201527f4c6f636b206578706972656400000000000000000000000000000000000000006044820152606401610561565b60008260000151600f0b136106e35760405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e67206973206c6f636b65640000000000000000000000000000006044820152606401610561565b816020015181116107365760405162461bcd60e51b815260206004820152601f60248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e006044820152606401610561565b6107446305a39a8042612550565b8111156107935760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652033207965617273206d617800006044820152606401610561565b6107a2846000838560036116a5565b5050600180555050565b60006107b7426117d9565b905090565b600560205281600052604060002081633b9aca0081106107db57600080fd5b6003020180546001820154600290920154600f82810b955070010000000000000000000000000000000090920490910b925084565b600260015414156108635760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610561565b600260015560005473ffffffffffffffffffffffffffffffffffffffff1633146108cf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b600082116108dc57600080fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260409182902082518084019093528054600f90810b810b810b80855260019092015492840192909252900b156109775760405162461bcd60e51b815260206004820152601960248201527f5769746864726177206f6c6420746f6b656e73206669727374000000000000006044820152606401610561565b600062093a8061098781856125dc565b61099191906126a2565b9050428111610a085760405162461bcd60e51b815260206004820152602660248201527f43616e206f6e6c79206c6f636b20756e74696c2074696d6520696e207468652060448201527f66757475726500000000000000000000000000000000000000000000000000006064820152608401610561565b610a166305a39a8042612550565b811115610a655760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652033207965617273206d617800006044820152606401610561565b610a738585838560016116a5565b505060018055505050565b60026001541415610ad15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610561565b600260015560005473ffffffffffffffffffffffffffffffffffffffff163314610b3d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600260208181526040808420815180830183528154600f81810b810b810b80845260018501805485890152865180880188528a81528089018b81529b8b529888529751820b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169290921790935596519094558151808301909252848252918101939093529092900b90610c04908490849061184e565b6040805182815242602082015273ffffffffffffffffffffffffffffffffffffffff8516917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a250506001805550565b600043821115610c6c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260066020526040812054815b6080811015610d6557818310610ca957610d65565b60006002610cb78486612550565b610cc2906001612550565b610ccc91906125dc565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600560205260409020909150869082633b9aca008110610d31577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600302016002015411610d4657809350610d54565b610d516001826127c3565b92505b50610d5e816127da565b9050610c94565b5073ffffffffffffffffffffffffffffffffffffffff8516600090815260056020526040812083633b9aca008110610dc6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b604080516080810182526003928302939093018054600f81810b810b810b8652700100000000000000000000000000000000909104810b810b900b6020850152600181015491840191909152600201546060830152549091506000610e2b878361201b565b600081815260046020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b938101939093526001810154918301919091526002015460608201529192508084841015610f34576000600481610ea4876001612550565b8152602080820192909252604090810160002081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060808301829052860151919250610f1691906127c3565b925083604001518160400151610f2c91906127c3565b915050610f58565b6060830151610f4390436127c3565b9150826040015142610f5591906127c3565b90505b60408301518215610f95578284606001518c610f7491906127c3565b610f7e90846126a2565b610f8891906125dc565b610f929082612550565b90505b6040870151610fa490826127c3565b8760200151610fb391906125f0565b87518890610fc29083906126df565b600f90810b810b90915288516000910b129050610ffd57505093516fffffffffffffffffffffffffffffffff16965061100b95505050505050565b600099505050505050505050505b92915050565b600061100b82426120a5565b600061100b826117d9565b60005473ffffffffffffffffffffffffffffffffffffffff16331461108f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b61109960006121e3565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660209081526040808320546005909252822081633b9aca008110611106577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60030201547001000000000000000000000000000000009004600f0b9392505050565b60004382111561113857600080fd5b6003546000611147848361201b565b600081815260046020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060820152919250838310156112805760006004816111bf866001612550565b8152602080820192909252604090810160002081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b938101939093526001810154918301919091526002015460608083018290528501519192501461127a578260600151816060015161124091906127c3565b8360400151826040015161125491906127c3565b6060850151611263908a6127c3565b61126d91906126a2565b61127791906125dc565b91505b506112cf565b438260600151146112cf57606082015161129a90436127c3565b60408301516112a990426127c3565b60608401516112b890896127c3565b6112c291906126a2565b6112cc91906125dc565b90505b6112e8828284604001516112e39190612550565b612258565b9695505050505050565b611099600060405180604001604052806000600f0b8152602001600081525060405180604001604052806000600f0b8152602001600081525061184e565b600061133c83836120a5565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040812082633b9aca0081106113a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6003020160010154905092915050565b600260015414156114065760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610561565b600260015560005473ffffffffffffffffffffffffffffffffffffffff1633146114725760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602090815260409182902082518084019093528054600f90810b810b900b83526001015490820152816114c257600080fd5b60008160000151600f0b136115195760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e64000000000000000000006044820152606401610561565b428160200151116115915760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e205769746860448201527f64726177000000000000000000000000000000000000000000000000000000006064820152608401610561565b6115a0838360008460026116a5565b50506001805550565b60005473ffffffffffffffffffffffffffffffffffffffff1633146116105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b73ffffffffffffffffffffffffffffffffffffffff81166116995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610561565b6116a2816121e3565b50565b60408051808201909152600080825260208201528290815160208084015190830152600f90810b900b81528151869083906116e19083906124e1565b600f90810b900b90525084156116f957602082018590525b73ffffffffffffffffffffffffffffffffffffffff8716600090815260026020908152604090912083518154600f9190910b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161781559083015160019091015561177987828461184e565b81602001518773ffffffffffffffffffffffffffffffffffffffff167fbe9cf0e939c614fad640a623a53ba0a807c8cb503c4c4c8dacabe27b86ff2dd58886426040516117c893929190612492565b60405180910390a350505050505050565b600354600081815260046020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b938101939093526001810154918301919091526002015460608201529091906118468185612258565b949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152600354600090819073ffffffffffffffffffffffffffffffffffffffff8816156119e0574287602001511180156118d4575060008760000151600f0b135b156119215786516118ea906305a39a8090612568565b600f90810b900b6020808701919091528701516119089042906127c3565b856020015161191791906125f0565b600f90810b900b85525b42866020015111801561193b575060008660000151600f0b135b15611988578551611951906305a39a8090612568565b600f90810b900b60208086019190915286015161196f9042906127c3565b846020015161197e91906125f0565b600f90810b900b84525b602080880151600090815260078252604090205490870151600f9190910b9350156119e0578660200151866020015114156119c5578291506119e0565b602080870151600090815260079091526040902054600f0b91505b604080516080810182526000808252602082015242918101919091524360608201528115611a6a575060008181526004602090815260409182902082516080810184528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b9281019290925260018101549282019290925260029091015460608201525b604081015160608201518190600042831015611abd576040850151611a8f90426127c3565b6060860151611a9e90436127c3565b611ab090670de0b6b3a76400006126a2565b611aba91906125dc565b90505b600062093a80611acd81876125dc565b611ad791906126a2565b905060005b60ff811015611c6c57611af262093a8083612550565b9150600042831115611b0657429250611b1a565b50600082815260076020526040902054600f0b5b611b2487846127c3565b8860200151611b3391906125f0565b88518990611b429083906126df565b600f90810b900b905250602088018051829190611b609083906124e1565b600f90810b810b90915289516000910b12159050611b7d57600088525b60008860200151600f0b1215611b9557600060208901525b604088018390529195508591670de0b6b3a7640000611bb487856127c3565b611bbe90866126a2565b611bc891906125dc565b611bd29086612550565b6060890152611be260018a612550565b985042831415611bf85750436060880152611c6c565b6000898152600460209081526040918290208a51918b0151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029390910b16919091178155908901516001820155606089015160029091015550611c65816127da565b9050611adc565b50600387905573ffffffffffffffffffffffffffffffffffffffff8e1615611d12578a602001518a60200151611ca291906126df565b86602001818151611cb391906124e1565b600f90810b900b9052508a518a51611ccb91906126df565b86518790611cda9083906124e1565b600f90810b810b90915260208801516000910b12159050611cfd57600060208701525b60008660000151600f0b1215611d1257600086525b600087815260046020908152604091829020885191890151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029390910b16919091178155908701516001820155606087015160029091015573ffffffffffffffffffffffffffffffffffffffff8e161561200b57428d602001511115611e235760208b0151611dac908a6124e1565b98508c602001518c602001511415611dd05760208a0151611dcd908a6126df565b98505b60208d810151600090815260079091526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff600f8c900b161790555b428c602001511115611ea3578c602001518c602001511115611ea35760208a0151611e4e90896126df565b60208d810151600090815260079091526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff600f84900b1617905597505b73ffffffffffffffffffffffffffffffffffffffff8e166000908152600660205260408120548f9190611ed7906001612550565b905080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550428c6040018181525050438c60600181815250508b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082633b9aca008110611fac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b82516020840151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029290910b1617600391909102919091019081556040820151600182015560609091015160029091015550505b5050505050505050505050505050565b60008082815b608081101561209b578183106120365761209b565b600060026120448486612550565b61204f906001612550565b61205991906125dc565b600081815260046020526040902060020154909150871061207c5780935061208a565b6120876001826127c3565b92505b50612094816127da565b9050612021565b5090949350505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040812054806120da57600091505061100b565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260056020526040812082633b9aca00811061213a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60408051608081018252600392909202929092018054600f81810b810b810b8452700100000000000000000000000000000000909104810b810b900b60208301526001810154928201839052600201546060820152915061219b908561274f565b81602001516121aa91906125f0565b815182906121b99083906126df565b600f90810b810b90915282516000910b121590506121d657600081525b51600f0b915061100b9050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080839050600062093a8080836040015161227491906125dc565b61227e91906126a2565b905060005b60ff81101561233a5761229962093a8083612550565b91506000858311156122ad578592506122c1565b50600082815260076020526040902054600f0b5b60408401516122d090846127c3565b84602001516122df91906125f0565b845185906122ee9083906126df565b600f90810b900b90525082861415612306575061233a565b808460200181815161231891906124e1565b600f90810b900b9052505060408301829052612333816127da565b9050612283565b5060008260000151600f0b121561235057600082525b50516fffffffffffffffffffffffffffffffff169392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461238f57600080fd5b919050565b6000602082840312156123a5578081fd5b61133c8261236b565b600080604083850312156123c0578081fd5b6123c98361236b565b946020939093013593505050565b6000806000606084860312156123eb578081fd5b6123f48461236b565b95602085013595506040909401359392505050565b60006020828403121561241a578081fd5b5035919050565b6000602080835283518082850152825b8181101561244d57858101830151858201604001528201612431565b8181111561245e5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b83815260608101600484106124d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b602082019390935260400152919050565b600081600f0b83600f0b828212826f7fffffffffffffffffffffffffffffff0382138115161561251357612513612813565b827fffffffffffffffffffffffffffffffff8000000000000000000000000000000003821281161561254757612547612813565b50019392505050565b6000821982111561256357612563612813565b500190565b600081600f0b83600f0b8061257f5761257f612842565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffff80000000000000000000000000000000831416156125d3576125d3612813565b90059392505050565b6000826125eb576125eb612842565b500490565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff8382138484138383048511828216161561262757612627612813565b7fffffffffffffffffffffffffffffffff800000000000000000000000000000008685128682058612818416161561266157612661612813565b87871292508582058712848416161561267c5761267c612813565b8585058712818416161561269257612692612813565b5050509290910295945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126da576126da612813565b500290565b600081600f0b83600f0b828112817fffffffffffffffffffffffffffffffff800000000000000000000000000000000183128115161561272157612721612813565b816f7fffffffffffffffffffffffffffffff01831381161561274557612745612813565b5090039392505050565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561278957612789612813565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156127bd576127bd612813565b50500390565b6000828210156127d5576127d5612813565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561280c5761280c612813565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea264697066735822122049ce21a6795cea58b9a92cb75262308d39252b74c5eb4638dc760ef644794b7b64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80637c74a174116100f9578063cbf9fe5f11610097578063da020a1811610071578063da020a18146104ce578063e8648376146104e1578063ee00ef3a146104f4578063f2fde38b146104ff57600080fd5b8063cbf9fe5f14610428578063d07b705f14610470578063d1febfb91461048357600080fd5b806395d89b41116100d357806395d89b41146101fc578063981b24d0146103d4578063adc63589146103e7578063c2c4c5c11461042057600080fd5b80637c74a174146103905780638da5cb5b146103a3578063900cf0cf146103cb57600080fd5b80634c3b67b41161016657806370a082311161014057806370a082311461032c5780637116c60c1461033f5780637119748414610352578063715018a61461038857600080fd5b80634c3b67b4146102ca5780634ee2cd7e146102dd57806354fd4d50146102f057600080fd5b806318160ddd116101a257806318160ddd1461025a57806328d09d4714610262578063313ce5671461029d5780633e173b29146102b757600080fd5b8063010ae757146101c957806306fdde03146101fc578063116b604514610245575b600080fd5b6101e96101d7366004612394565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b6102386040518060400160405280600681526020017f737665535447000000000000000000000000000000000000000000000000000081525081565b6040516101f39190612421565b6102586102533660046123ae565b610512565b005b6101e96107ac565b6102756102703660046123ae565b6107bc565b60408051600f95860b81529390940b60208401529282015260608101919091526080016101f3565b6102a5601281565b60405160ff90911681526020016101f3565b6102586102c53660046123d7565b610810565b6102586102d8366004612394565b610a7e565b6101e96102eb3660046123ae565b610c5d565b6102386040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6101e961033a366004612394565b611011565b6101e961034d366004612409565b61101d565b610375610360366004612409565b600760205260009081526040902054600f0b81565b604051600f9190910b81526020016101f3565b610258611028565b61037561039e366004612394565b61109b565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f3565b6101e960035481565b6101e96103e2366004612409565b611129565b6101e96103f5366004612394565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090206001015490565b6102586112f2565b610456610436366004612394565b60026020526000908152604090208054600190910154600f9190910b9082565b60408051600f9390930b83526020830191909152016101f3565b6101e961047e3660046123ae565b611330565b610275610491366004612409565b600460205260009081526040902080546001820154600290920154600f82810b93700100000000000000000000000000000000909304900b919084565b6101e96104dc3660046123ae565b611343565b6102586104ef3660046123ae565b6113b3565b6101e96305a39a8081565b61025861050d366004612394565b6115a9565b6002600154141561056a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015560005473ffffffffffffffffffffffffffffffffffffffff1633146105d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832081518083019092528054600f90810b810b900b825260010154918101919091529062093a8061062d81856125dc565b61063791906126a2565b90504282602001511161068c5760405162461bcd60e51b815260206004820152600c60248201527f4c6f636b206578706972656400000000000000000000000000000000000000006044820152606401610561565b60008260000151600f0b136106e35760405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e67206973206c6f636b65640000000000000000000000000000006044820152606401610561565b816020015181116107365760405162461bcd60e51b815260206004820152601f60248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e006044820152606401610561565b6107446305a39a8042612550565b8111156107935760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652033207965617273206d617800006044820152606401610561565b6107a2846000838560036116a5565b5050600180555050565b60006107b7426117d9565b905090565b600560205281600052604060002081633b9aca0081106107db57600080fd5b6003020180546001820154600290920154600f82810b955070010000000000000000000000000000000090920490910b925084565b600260015414156108635760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610561565b600260015560005473ffffffffffffffffffffffffffffffffffffffff1633146108cf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b600082116108dc57600080fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260409182902082518084019093528054600f90810b810b810b80855260019092015492840192909252900b156109775760405162461bcd60e51b815260206004820152601960248201527f5769746864726177206f6c6420746f6b656e73206669727374000000000000006044820152606401610561565b600062093a8061098781856125dc565b61099191906126a2565b9050428111610a085760405162461bcd60e51b815260206004820152602660248201527f43616e206f6e6c79206c6f636b20756e74696c2074696d6520696e207468652060448201527f66757475726500000000000000000000000000000000000000000000000000006064820152608401610561565b610a166305a39a8042612550565b811115610a655760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652033207965617273206d617800006044820152606401610561565b610a738585838560016116a5565b505060018055505050565b60026001541415610ad15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610561565b600260015560005473ffffffffffffffffffffffffffffffffffffffff163314610b3d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600260208181526040808420815180830183528154600f81810b810b810b80845260018501805485890152865180880188528a81528089018b81529b8b529888529751820b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169290921790935596519094558151808301909252848252918101939093529092900b90610c04908490849061184e565b6040805182815242602082015273ffffffffffffffffffffffffffffffffffffffff8516917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a250506001805550565b600043821115610c6c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260066020526040812054815b6080811015610d6557818310610ca957610d65565b60006002610cb78486612550565b610cc2906001612550565b610ccc91906125dc565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600560205260409020909150869082633b9aca008110610d31577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600302016002015411610d4657809350610d54565b610d516001826127c3565b92505b50610d5e816127da565b9050610c94565b5073ffffffffffffffffffffffffffffffffffffffff8516600090815260056020526040812083633b9aca008110610dc6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b604080516080810182526003928302939093018054600f81810b810b810b8652700100000000000000000000000000000000909104810b810b900b6020850152600181015491840191909152600201546060830152549091506000610e2b878361201b565b600081815260046020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b938101939093526001810154918301919091526002015460608201529192508084841015610f34576000600481610ea4876001612550565b8152602080820192909252604090810160002081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060808301829052860151919250610f1691906127c3565b925083604001518160400151610f2c91906127c3565b915050610f58565b6060830151610f4390436127c3565b9150826040015142610f5591906127c3565b90505b60408301518215610f95578284606001518c610f7491906127c3565b610f7e90846126a2565b610f8891906125dc565b610f929082612550565b90505b6040870151610fa490826127c3565b8760200151610fb391906125f0565b87518890610fc29083906126df565b600f90810b810b90915288516000910b129050610ffd57505093516fffffffffffffffffffffffffffffffff16965061100b95505050505050565b600099505050505050505050505b92915050565b600061100b82426120a5565b600061100b826117d9565b60005473ffffffffffffffffffffffffffffffffffffffff16331461108f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b61109960006121e3565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660209081526040808320546005909252822081633b9aca008110611106577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60030201547001000000000000000000000000000000009004600f0b9392505050565b60004382111561113857600080fd5b6003546000611147848361201b565b600081815260046020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b93810193909352600181015491830191909152600201546060820152919250838310156112805760006004816111bf866001612550565b8152602080820192909252604090810160002081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b938101939093526001810154918301919091526002015460608083018290528501519192501461127a578260600151816060015161124091906127c3565b8360400151826040015161125491906127c3565b6060850151611263908a6127c3565b61126d91906126a2565b61127791906125dc565b91505b506112cf565b438260600151146112cf57606082015161129a90436127c3565b60408301516112a990426127c3565b60608401516112b890896127c3565b6112c291906126a2565b6112cc91906125dc565b90505b6112e8828284604001516112e39190612550565b612258565b9695505050505050565b611099600060405180604001604052806000600f0b8152602001600081525060405180604001604052806000600f0b8152602001600081525061184e565b600061133c83836120a5565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040812082633b9aca0081106113a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6003020160010154905092915050565b600260015414156114065760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610561565b600260015560005473ffffffffffffffffffffffffffffffffffffffff1633146114725760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602090815260409182902082518084019093528054600f90810b810b900b83526001015490820152816114c257600080fd5b60008160000151600f0b136115195760405162461bcd60e51b815260206004820152601660248201527f4e6f206578697374696e67206c6f636b20666f756e64000000000000000000006044820152606401610561565b428160200151116115915760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e205769746860448201527f64726177000000000000000000000000000000000000000000000000000000006064820152608401610561565b6115a0838360008460026116a5565b50506001805550565b60005473ffffffffffffffffffffffffffffffffffffffff1633146116105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610561565b73ffffffffffffffffffffffffffffffffffffffff81166116995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610561565b6116a2816121e3565b50565b60408051808201909152600080825260208201528290815160208084015190830152600f90810b900b81528151869083906116e19083906124e1565b600f90810b900b90525084156116f957602082018590525b73ffffffffffffffffffffffffffffffffffffffff8716600090815260026020908152604090912083518154600f9190910b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161781559083015160019091015561177987828461184e565b81602001518773ffffffffffffffffffffffffffffffffffffffff167fbe9cf0e939c614fad640a623a53ba0a807c8cb503c4c4c8dacabe27b86ff2dd58886426040516117c893929190612492565b60405180910390a350505050505050565b600354600081815260046020908152604080832081516080810183528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b938101939093526001810154918301919091526002015460608201529091906118468185612258565b949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152600354600090819073ffffffffffffffffffffffffffffffffffffffff8816156119e0574287602001511180156118d4575060008760000151600f0b135b156119215786516118ea906305a39a8090612568565b600f90810b900b6020808701919091528701516119089042906127c3565b856020015161191791906125f0565b600f90810b900b85525b42866020015111801561193b575060008660000151600f0b135b15611988578551611951906305a39a8090612568565b600f90810b900b60208086019190915286015161196f9042906127c3565b846020015161197e91906125f0565b600f90810b900b84525b602080880151600090815260078252604090205490870151600f9190910b9350156119e0578660200151866020015114156119c5578291506119e0565b602080870151600090815260079091526040902054600f0b91505b604080516080810182526000808252602082015242918101919091524360608201528115611a6a575060008181526004602090815260409182902082516080810184528154600f81810b810b810b8352700100000000000000000000000000000000909104810b810b900b9281019290925260018101549282019290925260029091015460608201525b604081015160608201518190600042831015611abd576040850151611a8f90426127c3565b6060860151611a9e90436127c3565b611ab090670de0b6b3a76400006126a2565b611aba91906125dc565b90505b600062093a80611acd81876125dc565b611ad791906126a2565b905060005b60ff811015611c6c57611af262093a8083612550565b9150600042831115611b0657429250611b1a565b50600082815260076020526040902054600f0b5b611b2487846127c3565b8860200151611b3391906125f0565b88518990611b429083906126df565b600f90810b900b905250602088018051829190611b609083906124e1565b600f90810b810b90915289516000910b12159050611b7d57600088525b60008860200151600f0b1215611b9557600060208901525b604088018390529195508591670de0b6b3a7640000611bb487856127c3565b611bbe90866126a2565b611bc891906125dc565b611bd29086612550565b6060890152611be260018a612550565b985042831415611bf85750436060880152611c6c565b6000898152600460209081526040918290208a51918b0151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029390910b16919091178155908901516001820155606089015160029091015550611c65816127da565b9050611adc565b50600387905573ffffffffffffffffffffffffffffffffffffffff8e1615611d12578a602001518a60200151611ca291906126df565b86602001818151611cb391906124e1565b600f90810b900b9052508a518a51611ccb91906126df565b86518790611cda9083906124e1565b600f90810b810b90915260208801516000910b12159050611cfd57600060208701525b60008660000151600f0b1215611d1257600086525b600087815260046020908152604091829020885191890151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029390910b16919091178155908701516001820155606087015160029091015573ffffffffffffffffffffffffffffffffffffffff8e161561200b57428d602001511115611e235760208b0151611dac908a6124e1565b98508c602001518c602001511415611dd05760208a0151611dcd908a6126df565b98505b60208d810151600090815260079091526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff600f8c900b161790555b428c602001511115611ea3578c602001518c602001511115611ea35760208a0151611e4e90896126df565b60208d810151600090815260079091526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff600f84900b1617905597505b73ffffffffffffffffffffffffffffffffffffffff8e166000908152600660205260408120548f9190611ed7906001612550565b905080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550428c6040018181525050438c60600181815250508b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082633b9aca008110611fac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b82516020840151600f90810b6fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029290910b1617600391909102919091019081556040820151600182015560609091015160029091015550505b5050505050505050505050505050565b60008082815b608081101561209b578183106120365761209b565b600060026120448486612550565b61204f906001612550565b61205991906125dc565b600081815260046020526040902060020154909150871061207c5780935061208a565b6120876001826127c3565b92505b50612094816127da565b9050612021565b5090949350505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040812054806120da57600091505061100b565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260056020526040812082633b9aca00811061213a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60408051608081018252600392909202929092018054600f81810b810b810b8452700100000000000000000000000000000000909104810b810b900b60208301526001810154928201839052600201546060820152915061219b908561274f565b81602001516121aa91906125f0565b815182906121b99083906126df565b600f90810b810b90915282516000910b121590506121d657600081525b51600f0b915061100b9050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080839050600062093a8080836040015161227491906125dc565b61227e91906126a2565b905060005b60ff81101561233a5761229962093a8083612550565b91506000858311156122ad578592506122c1565b50600082815260076020526040902054600f0b5b60408401516122d090846127c3565b84602001516122df91906125f0565b845185906122ee9083906126df565b600f90810b900b90525082861415612306575061233a565b808460200181815161231891906124e1565b600f90810b900b9052505060408301829052612333816127da565b9050612283565b5060008260000151600f0b121561235057600082525b50516fffffffffffffffffffffffffffffffff169392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461238f57600080fd5b919050565b6000602082840312156123a5578081fd5b61133c8261236b565b600080604083850312156123c0578081fd5b6123c98361236b565b946020939093013593505050565b6000806000606084860312156123eb578081fd5b6123f48461236b565b95602085013595506040909401359392505050565b60006020828403121561241a578081fd5b5035919050565b6000602080835283518082850152825b8181101561244d57858101830151858201604001528201612431565b8181111561245e5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b83815260608101600484106124d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b602082019390935260400152919050565b600081600f0b83600f0b828212826f7fffffffffffffffffffffffffffffff0382138115161561251357612513612813565b827fffffffffffffffffffffffffffffffff8000000000000000000000000000000003821281161561254757612547612813565b50019392505050565b6000821982111561256357612563612813565b500190565b600081600f0b83600f0b8061257f5761257f612842565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffff80000000000000000000000000000000831416156125d3576125d3612813565b90059392505050565b6000826125eb576125eb612842565b500490565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff8382138484138383048511828216161561262757612627612813565b7fffffffffffffffffffffffffffffffff800000000000000000000000000000008685128682058612818416161561266157612661612813565b87871292508582058712848416161561267c5761267c612813565b8585058712818416161561269257612692612813565b5050509290910295945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126da576126da612813565b500290565b600081600f0b83600f0b828112817fffffffffffffffffffffffffffffffff800000000000000000000000000000000183128115161561272157612721612813565b816f7fffffffffffffffffffffffffffffff01831381161561274557612745612813565b5090039392505050565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561278957612789612813565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156127bd576127bd612813565b50500390565b6000828210156127d5576127d5612813565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561280c5761280c612813565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea264697066735822122049ce21a6795cea58b9a92cb75262308d39252b74c5eb4638dc760ef644794b7b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOfAt(address,uint256)": {
        "details": "Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime",
        "params": {
          "_block": "Block to calculate the voting power at",
          "addr": "User's wallet address"
        },
        "returns": {
          "_0": "Voting power"
        }
      },
      "create_lock_for(address,uint256,uint256)": {
        "params": {
          "_addr": "Create lock for address",
          "_unlock_time": "Epoch time when tokens unlock, rounded down to whole weeks",
          "_value": "Amount to deposit"
        }
      },
      "get_last_user_slope(address)": {
        "params": {
          "addr": "Address of the user wallet"
        },
        "returns": {
          "_0": "Value of the slope"
        }
      },
      "increase_amount_for(address,uint256)": {
        "params": {
          "_addr": "Increase amount for address",
          "_value": "Amount of tokens to deposit and add to the lock"
        }
      },
      "increase_unlock_time_for(address,uint256)": {
        "params": {
          "_addr": "Increase unlock time for address",
          "_unlock_time": "New epoch time for unlocking"
        }
      },
      "locked__end(address)": {
        "params": {
          "_addr": "User wallet address"
        },
        "returns": {
          "_0": "Epoch time of the lock end"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "_block": "Block to calculate the total voting power at"
        },
        "returns": {
          "_0": "Total voting power at `_block`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "user_point_history__ts(address,uint256)": {
        "params": {
          "_addr": "User wallet address",
          "_idx": "User epoch number"
        },
        "returns": {
          "_0": "Epoch time of the checkpoint"
        }
      },
      "withdraw_for(address)": {
        "details": "Only possible if the lock has expired",
        "params": {
          "_addr": "Withdraw for address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOfAt(address,uint256)": {
        "notice": "Measure voting power of `addr` at block height `_block`"
      },
      "checkpoint()": {
        "notice": "Record global data to checkpoint"
      },
      "constructor": {
        "notice": "Contract constructor"
      },
      "create_lock_for(address,uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `_addr` and lock until `_unlock_time`"
      },
      "get_last_user_slope(address)": {
        "notice": "Get the most recently recorded rate of voting power decrease for `_addr`"
      },
      "increase_amount_for(address,uint256)": {
        "notice": "Deposit `_value` additional tokens for `_addr` without modifying the unlock time"
      },
      "increase_unlock_time_for(address,uint256)": {
        "notice": "Extend the unlock time for `_addr` to `_unlock_time`"
      },
      "locked__end(address)": {
        "notice": "Get timestamp when `_addr`'s lock finishes"
      },
      "totalSupplyAt(uint256)": {
        "notice": "Calculate total voting power at some point in the past"
      },
      "user_point_history__ts(address,uint256)": {
        "notice": "Get the timestamp for checkpoint `_idx` for `_addr`"
      },
      "withdraw_for(address)": {
        "notice": "Withdraw all tokens for `_addr`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 118,
        "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3603,
        "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
        "label": "locked",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(LockedBalance)3548_storage)"
      },
      {
        "astId": 3605,
        "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
        "label": "epoch",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3610,
        "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
        "label": "point_history",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Point)3543_storage)"
      },
      {
        "astId": 3617,
        "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
        "label": "user_point_history",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(Point)3543_storage)1000000000_storage)"
      },
      {
        "astId": 3621,
        "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
        "label": "user_point_epoch",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3625,
        "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
        "label": "slope_changes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_int128)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)3543_storage)1000000000_storage": {
        "base": "t_struct(Point)3543_storage",
        "encoding": "inplace",
        "label": "struct Point[1000000000]",
        "numberOfBytes": "96000000000"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_array(t_struct(Point)3543_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Point[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)3543_storage)1000000000_storage"
      },
      "t_mapping(t_address,t_struct(LockedBalance)3548_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)3548_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int128)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_uint256,t_struct(Point)3543_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Point)",
        "numberOfBytes": "32",
        "value": "t_struct(Point)3543_storage"
      },
      "t_struct(LockedBalance)3548_storage": {
        "encoding": "inplace",
        "label": "struct LockedBalance",
        "members": [
          {
            "astId": 3545,
            "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 3547,
            "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)3543_storage": {
        "encoding": "inplace",
        "label": "struct Point",
        "members": [
          {
            "astId": 3536,
            "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 3538,
            "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 3540,
            "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3542,
            "contract": "contracts/sVotingEscrow.sol:sVotingEscrow",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}